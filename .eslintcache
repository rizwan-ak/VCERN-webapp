[{"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\Landing.js":"1","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\Login.js":"2","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\index.js":"3","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNTextField.js":"4","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\theme.js":"5","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\routes.js":"6","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNButton.js":"7","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\Terms.js":"8","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\redux\\store\\index.js":"9","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\App.js":"10","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\redux\\reducers\\index.js":"11","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\redux\\actions\\actionCreater.js":"12","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\api.js":"13","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\constants.js":"14","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNTypography.js":"15","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNAlert.js":"16","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\data\\index.js":"17","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\PaymentAgreements.js":"18","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNAutocomplete.js":"19","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\organization\\Register.js":"20","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\user\\Register.js":"21","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\Loader.js":"22","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\loader.js":"23","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\user\\Dashboard.js":"24","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\Header.js":"25","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNLineChart.js":"26","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNPieChart.js":"27","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\organization\\Dashboard.js":"28","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNGroupAvatar.js":"29","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\ResetPassword.js":"30","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\ForgotPassword.js":"31","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\Verify.js":"32","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\icons.js":"33","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNAvatar.js":"34","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\helper.js":"35","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\FileMessage.js":"36","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNModal.js":"37","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\Tickets.js":"38","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\Messages.js":"39","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\SelectPool.js":"40","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\organization\\NewPool.js":"41","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\socketNotifications.js":"42","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\socketChat.js":"43","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\organization\\ManageGroups.js":"44","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\vcern\\Dashboard.js":"45","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\AllPools.js":"46","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\PaymentModal.js":"47","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\DashboardHeader.js":"48","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\organization\\Settings.js":"49","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNImageUpload.js":"50","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\organization\\ManageMembers.js":"51","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\vcern\\ManageOrganizations.js":"52","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNConfirmationModal.js":"53","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\vcern\\ManageAdmins.js":"54","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNDropdown.js":"55","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\Blogs.js":"56","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\BlogCard.js":"57","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\vcern\\AddBlog.js":"58","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\SingleBlog.js":"59","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\user\\Settings.js":"60","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\user\\EditProfile.js":"61","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\Profile.js":"62","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\user\\Documents.js":"63","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\DocumentsList.js":"64"},{"size":5311,"mtime":1622558119023,"results":"65","hashOfConfig":"66"},{"size":5194,"mtime":1625004214967,"results":"67","hashOfConfig":"66"},{"size":229,"mtime":1620572569212,"results":"68","hashOfConfig":"66"},{"size":684,"mtime":1624640545256,"results":"69","hashOfConfig":"66"},{"size":328,"mtime":1620573601635,"results":"70","hashOfConfig":"66"},{"size":6775,"mtime":1625003896586,"results":"71","hashOfConfig":"66"},{"size":1535,"mtime":1624393772935,"results":"72","hashOfConfig":"66"},{"size":1968,"mtime":1621456194986,"results":"73","hashOfConfig":"66"},{"size":482,"mtime":1620492627100,"results":"74","hashOfConfig":"66"},{"size":1048,"mtime":1621446548087,"results":"75","hashOfConfig":"66"},{"size":1394,"mtime":1624913164535,"results":"76","hashOfConfig":"66"},{"size":13472,"mtime":1625001098038,"results":"77","hashOfConfig":"66"},{"size":16644,"mtime":1625001082499,"results":"78","hashOfConfig":"66"},{"size":594,"mtime":1623417246940,"results":"79","hashOfConfig":"66"},{"size":654,"mtime":1621613509351,"results":"80","hashOfConfig":"66"},{"size":549,"mtime":1621709829068,"results":"81","hashOfConfig":"66"},{"size":4286,"mtime":1624822696580,"results":"82","hashOfConfig":"66"},{"size":1989,"mtime":1621456187381,"results":"83","hashOfConfig":"66"},{"size":1059,"mtime":1624656449652,"results":"84","hashOfConfig":"66"},{"size":23770,"mtime":1623953689842,"results":"85","hashOfConfig":"66"},{"size":27174,"mtime":1622558308037,"results":"86","hashOfConfig":"66"},{"size":598,"mtime":1621455847692,"results":"87","hashOfConfig":"88"},{"size":620,"mtime":1622827287558,"results":"89","hashOfConfig":"66"},{"size":8756,"mtime":1625004307944,"results":"90","hashOfConfig":"66"},{"size":10686,"mtime":1625003566085,"results":"91","hashOfConfig":"66"},{"size":868,"mtime":1621713482063,"results":"92","hashOfConfig":"66"},{"size":1204,"mtime":1621713615157,"results":"93","hashOfConfig":"66"},{"size":4549,"mtime":1625004351914,"results":"94","hashOfConfig":"66"},{"size":653,"mtime":1621677123534,"results":"95","hashOfConfig":"66"},{"size":2603,"mtime":1622528990323,"results":"96","hashOfConfig":"66"},{"size":3556,"mtime":1624040785189,"results":"97","hashOfConfig":"66"},{"size":3784,"mtime":1622654321667,"results":"98","hashOfConfig":"66"},{"size":5106,"mtime":1624639886961,"results":"99","hashOfConfig":"66"},{"size":159,"mtime":1624573787938,"results":"100","hashOfConfig":"66"},{"size":1005,"mtime":1625003245114,"results":"101","hashOfConfig":"66"},{"size":562,"mtime":1624040663425,"results":"102","hashOfConfig":"66"},{"size":820,"mtime":1624399707856,"results":"103","hashOfConfig":"66"},{"size":16789,"mtime":1623859306112,"results":"104","hashOfConfig":"66"},{"size":13676,"mtime":1624040899558,"results":"105","hashOfConfig":"66"},{"size":3724,"mtime":1625004658480,"results":"106","hashOfConfig":"66"},{"size":5104,"mtime":1623674709309,"results":"107","hashOfConfig":"66"},{"size":1331,"mtime":1625003650802,"results":"108","hashOfConfig":"66"},{"size":3148,"mtime":1623673843929,"results":"109","hashOfConfig":"66"},{"size":4276,"mtime":1624102235402,"results":"110","hashOfConfig":"66"},{"size":8879,"mtime":1624739150949,"results":"111","hashOfConfig":"66"},{"size":10538,"mtime":1625004401816,"results":"112","hashOfConfig":"66"},{"size":6567,"mtime":1624039096584,"results":"113","hashOfConfig":"66"},{"size":3168,"mtime":1624729339048,"results":"114","hashOfConfig":"66"},{"size":4939,"mtime":1624913480197,"results":"115","hashOfConfig":"66"},{"size":1111,"mtime":1624912627876,"results":"116","hashOfConfig":"66"},{"size":16056,"mtime":1624989431175,"results":"117","hashOfConfig":"66"},{"size":4226,"mtime":1624890748371,"results":"118","hashOfConfig":"66"},{"size":923,"mtime":1624485465799,"results":"119","hashOfConfig":"66"},{"size":9130,"mtime":1624893333171,"results":"120","hashOfConfig":"66"},{"size":702,"mtime":1624822627921,"results":"121","hashOfConfig":"66"},{"size":2914,"mtime":1624915513974,"results":"122","hashOfConfig":"66"},{"size":1653,"mtime":1624740958045,"results":"123","hashOfConfig":"66"},{"size":4799,"mtime":1624911701002,"results":"124","hashOfConfig":"66"},{"size":2136,"mtime":1624997241843,"results":"125","hashOfConfig":"66"},{"size":4947,"mtime":1624723623822,"results":"126","hashOfConfig":"66"},{"size":17946,"mtime":1624999199460,"results":"127","hashOfConfig":"66"},{"size":5025,"mtime":1624989976161,"results":"128","hashOfConfig":"66"},{"size":4190,"mtime":1625001932806,"results":"129","hashOfConfig":"66"},{"size":901,"mtime":1625000516492,"results":"130","hashOfConfig":"66"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},"q8116x",{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"138"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"141"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sy4xd7",{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"187","messages":"188","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"156"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"168"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"148"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"238"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"242"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"153"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"256","messages":"257","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"148"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"148"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"133"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"279","messages":"280","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"281","messages":"282","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\Landing.js",[],["285","286"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\Login.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\index.js",[],["287","288"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNTextField.js",[],["289","290"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\theme.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\routes.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNButton.js",[],["291","292"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\Terms.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\redux\\store\\index.js",[],["293","294"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\App.js",[],["295","296"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\redux\\reducers\\index.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\redux\\actions\\actionCreater.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\api.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\constants.js",["297","298"],"const constants = {\r\n    LOGIN: 'LOGIN',\r\n    SET_ORGANIZATIONS: 'SET_ORGANIZATIONS',\r\n    SET_LOADING: 'SET_LOADING',\r\n    SET_ERROR: 'SET_ERROR',\r\n    SET_USER_TYPE: 'SET_USER_TYPE',\r\n    SET_SELECTED_POOL: 'SET_SELECTED_POOL',\r\n    USER_TYPE_ORG: 'organization',\r\n    USER_TYPE_MEMBER: 'member',\r\n    USER_TYPE_VCERN: 'admin',\r\n    EMAIL_REGEX: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/,\r\n    SPECIAL_CHARACTER_REGEX: /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~,0-9]/,\r\n    UPPERCASE_REGEX: /[A-Z]/,\r\n    LOWERCASE_REGEX: /[a-z]/,\r\n};\r\n\r\nexport default constants;\r\n","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNTypography.js",[],["299","300"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNAlert.js",[],["301","302"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\data\\index.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\PaymentAgreements.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNAutocomplete.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\organization\\Register.js",["303","304","305","306"],"import { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport bgPic from '../../common/assets/backgrounds/register.png';\r\nimport logo from '../../common/assets/logos/blue-with-text.png';\r\n\r\nimport VCERNTypography from '../../common/elements/VCERNTypography';\r\nimport VCERNButton from '../../common/elements/VCERNButton';\r\nimport VCERNTextField from '../../common/elements/VCERNTextField';\r\n\r\nimport { Checkbox, Grid, Paper, Step, StepLabel, Stepper } from '@material-ui/core';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props';\r\n\r\nimport AC from '../../redux/actions/actionCreater';\r\nimport { organizationSteps, statesList, citiesList } from '../../common/data';\r\nimport VCERNAutocomplete from '../../common/elements/VCERNAutocomplete';\r\nimport constants from '../../common/constants';\r\nimport cardsPic from '../../common/assets/others/cards.png';\r\n\r\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\r\n\r\nimport InputMask from 'react-input-mask';\r\nimport icons, { CheckCircle } from '../../common/icons';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: { height: '100vh' },\r\n    image: {\r\n        backgroundImage: `url(${bgPic})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center',\r\n        height: '100vh',\r\n        position: 'fixed',\r\n        width: '100%',\r\n        textAlign: 'center',\r\n        right: 0,\r\n        [theme.breakpoints.down('sm')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n    paper: { display: 'flex', justifyContent: 'center', alignItems: 'center', padding: '20px 0' },\r\n    container: {\r\n        width: 420,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: 300,\r\n            justifyContent: 'space-between',\r\n        },\r\n    },\r\n\r\n    logo: {\r\n        height: 100,\r\n        width: 220,\r\n        marginTop: 50,\r\n        [theme.breakpoints.down('sm')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n\r\n    text: { fontWeight: 'bold', margin: '10px 0' },\r\n    title: { fontWeight: 'bold' },\r\n    underline: { fontWeight: 'bold', margin: '20px 0', textDecoration: 'underline', cursor: 'pointer' },\r\n    input: { margin: '15px 0' },\r\n    marginRight: { marginRight: 15 },\r\n    continueButton: { margin: '10px 0' },\r\n\r\n    stepper: {\r\n        padding: '20px 0',\r\n        '& .MuiStepIcon-root': { color: '#B6BFDB' },\r\n        '& .MuiStepIcon-active': { color: '#FE9900' },\r\n        '& .MuiStepIcon-text': { fill: 'white' },\r\n    },\r\n\r\n    borderedButton: { border: '1px solid #07A7E3' },\r\n    tickIcon: { fontSize: 10, marginRight: 10, padding: 0, border: '3px solid #07A7E3', borderRadius: 50, fontWeight: 'bold', color: 'white' },\r\n    activeTickIcon: { fontSize: 12, marginRight: 10, padding: 3, backgroundColor: '#07A7E3', borderRadius: 50, fontWeight: 'bold', color: 'white' },\r\n    inline: { display: 'flex', justifyContent: 'space-between', width: '100%', margin: '10px 0' },\r\n\r\n    activeText: { color: '#17AE38', display: 'flex', alignItems: 'center' },\r\n    inActiveText: { color: '#6F7F9F', display: 'flex', alignItems: 'center' },\r\n\r\n    cardsPic: { height: 40, width: 140 },\r\n    card: { borderBottom: '2px solid #07A7E3', paddingBottom: 5, margin: '20px 0' },\r\n    remberMeContainer: { display: 'flex', alignItems: 'center', width: '100%' },\r\n}));\r\n\r\nfunction OrganizationRegister({ register, type, setError, organizationSubscriptionPrice }) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n\r\n    const [activeStep, setActiveStep] = useState(0);\r\n    const [isPasswordLengthValid, setIsPasswordLengthValid] = useState(false);\r\n    const [isUppercaseIncludedInPassword, setIsUppercaseIncludedInPassword] = useState(false);\r\n    const [isLowercaseIncludedInPassword, setIsLowercaseIncludedInPassword] = useState(false);\r\n    const [isSpecialCharacterIncludedInPassword, setIsSpecialCharacterIncludedInPassword] = useState(false);\r\n\r\n    const [data, setData] = useState({\r\n        first_name: '',\r\n        last_name: '',\r\n        a_phone: '',\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        name: '',\r\n        phone: '',\r\n        street_address: '',\r\n        apt: '',\r\n        city: '',\r\n        state: '',\r\n        zip_code: '',\r\n        p1_first_name: '',\r\n        p1_last_name: '',\r\n        p1_phone: '',\r\n        p1_email: '',\r\n        p2_first_name: '',\r\n        p2_last_name: '',\r\n        p2_phone: '',\r\n        p2_email: '',\r\n        agreedTerms: false,\r\n    });\r\n\r\n    const {\r\n        first_name,\r\n        last_name,\r\n        a_phone,\r\n        email,\r\n        password,\r\n        confirmPassword,\r\n        name,\r\n        phone,\r\n        street_address,\r\n        apt,\r\n        city,\r\n        state,\r\n        zip_code,\r\n        p1_first_name,\r\n        p1_last_name,\r\n        p1_phone,\r\n        p1_email,\r\n        p2_first_name,\r\n        p2_last_name,\r\n        p2_phone,\r\n        p2_email,\r\n        agreedTerms,\r\n    } = data;\r\n\r\n    const handleOnChange = evt => {\r\n        const { value, name } = evt.target;\r\n        setData({ ...data, [name]: value });\r\n        if (name === 'password') {\r\n            value.length > 7 ? setIsPasswordLengthValid(true) : setIsPasswordLengthValid(false);\r\n            password && constants.UPPERCASE_REGEX.test(value) ? setIsUppercaseIncludedInPassword(true) : setIsUppercaseIncludedInPassword(false);\r\n            password && constants.LOWERCASE_REGEX.test(value) ? setIsLowercaseIncludedInPassword(true) : setIsLowercaseIncludedInPassword(false);\r\n            constants.SPECIAL_CHARACTER_REGEX.test(value) ? setIsSpecialCharacterIncludedInPassword(true) : setIsSpecialCharacterIncludedInPassword(false);\r\n        }\r\n    };\r\n\r\n    const handleSocialAuth = response => {\r\n        console.log(response);\r\n    };\r\n\r\n    const handleStep1Next = () => {\r\n        if (\r\n            !password ||\r\n            !confirmPassword ||\r\n            !first_name ||\r\n            !last_name ||\r\n            !a_phone ||\r\n            !email ||\r\n            !isPasswordLengthValid ||\r\n            !isLowercaseIncludedInPassword ||\r\n            !isUppercaseIncludedInPassword ||\r\n            !isSpecialCharacterIncludedInPassword\r\n        )\r\n            return setError('Please enter all required fields.');\r\n        if (!constants.EMAIL_REGEX.test(email)) return setError('Please enter a valid Email.');\r\n        if (password !== confirmPassword) return setError('Password and Confirm Password must be same.');\r\n        setActiveStep(1);\r\n    };\r\n\r\n    const handleStep2Next = () => {\r\n        if (!city || !state || !street_address || !zip_code || !name || !phone) return setError('Please enter all required fields.');\r\n        setActiveStep(2);\r\n    };\r\n\r\n    const handleStep3Next = () => {\r\n        if (!p1_first_name || !p1_last_name || !p1_email || !p1_phone) return setError('Please enter all required fields.');\r\n        setActiveStep(3);\r\n    };\r\n\r\n    const handleSubmit = async evt => {\r\n        if (!agreedTerms) return setError('Please accept Terms & Conditions to proceed');\r\n        evt.preventDefault();\r\n        if (!stripe || !elements) return;\r\n\r\n        const cardElement = elements.getElement(CardElement);\r\n        const { error, paymentMethod } = await stripe.createPaymentMethod({ type: 'card', card: cardElement });\r\n\r\n        if (error) {\r\n            console.log('[error]', error);\r\n            setError(error.message);\r\n        } else {\r\n            register({ ...data, payment_method: paymentMethod.id }, type, () => history.push('/verify'));\r\n        }\r\n    };\r\n\r\n    const step1 = (\r\n        <div className={classes.container}>\r\n            <VCERNTypography variant=\"h4\" className={classes.text} value=\"Register\" />\r\n\r\n            <Stepper color=\"secondary\" activeStep={activeStep} alternativeLabel className={classes.stepper}>\r\n                {organizationSteps.map(label => (\r\n                    <Step key={label}>\r\n                        <StepLabel>{label}</StepLabel>\r\n                    </Step>\r\n                ))}\r\n            </Stepper>\r\n\r\n            <VCERNTypography\r\n                variant=\"body2\"\r\n                className={classes.text}\r\n                value=\"Enter you name as it appears in your ID or official document. \r\nTo complete registration, please have beneficiary contact information and debit/credit card handy\"\r\n            />\r\n\r\n            <VCERNTextField label=\"First Name *\" icon={icons.person} className={classes.input} value={first_name} name=\"first_name\" onChange={handleOnChange} />\r\n            <VCERNTextField label=\"Last Name *\" icon={icons.person} className={classes.input} value={last_name} name=\"last_name\" onChange={handleOnChange} />\r\n            <VCERNTextField label=\"Email *\" icon={icons.email} className={classes.input} value={email} name=\"email\" onChange={handleOnChange} />\r\n\r\n            <InputMask mask=\"(+1) 999 999 99 99\" className={classes.input} value={a_phone} onChange={c => setData({ ...data, a_phone: c.target.value })} maskChar=\" \">\r\n                {() => <VCERNTextField label=\"Phone Number *\" icon={icons.phone} />}\r\n            </InputMask>\r\n\r\n            <VCERNTextField type=\"password\" label=\"Password *\" icon={icons.password} className={classes.input} value={password} name=\"password\" onChange={handleOnChange} />\r\n            <VCERNTextField\r\n                type=\"password\"\r\n                label=\"Confirm Password *\"\r\n                icon={icons.password}\r\n                className={classes.input}\r\n                value={confirmPassword}\r\n                name=\"confirmPassword\"\r\n                onChange={handleOnChange}\r\n            />\r\n\r\n            <VCERNTypography variant=\"body1\" align=\"left\" className={isPasswordLengthValid ? classes.activeText : classes.inActiveText}>\r\n                <CheckCircle fontSize=\"small\" style={{ marginRight: 8 }} />\r\n                Your password should be at least 8\r\n            </VCERNTypography>\r\n            <VCERNTypography variant=\"body1\" align=\"left\" className={isUppercaseIncludedInPassword ? classes.activeText : classes.inActiveText}>\r\n                <CheckCircle fontSize=\"small\" style={{ marginRight: 8 }} />1 upper case letter\r\n            </VCERNTypography>\r\n            <VCERNTypography variant=\"body1\" align=\"left\" className={isLowercaseIncludedInPassword ? classes.activeText : classes.inActiveText}>\r\n                <CheckCircle fontSize=\"small\" style={{ marginRight: 8 }} />1 lower case atleast\r\n            </VCERNTypography>\r\n            <VCERNTypography variant=\"body1\" align=\"left\" className={isSpecialCharacterIncludedInPassword ? classes.activeText : classes.inActiveText}>\r\n                <CheckCircle fontSize=\"small\" style={{ marginRight: 8 }} />1 number or special character atleast\r\n            </VCERNTypography>\r\n\r\n            <VCERNButton fullWidth value=\"Continue\" className={classes.continueButton} onClick={handleStep1Next} />\r\n\r\n            <VCERNTypography variant=\"h4\" align=\"center\" className={classes.text} value=\"or\" />\r\n\r\n            <GoogleLogin\r\n                clientId={process.env.REACT_APP_GOOGLE_AUTH_API}\r\n                onSuccess={handleSocialAuth}\r\n                onFailure={handleSocialAuth}\r\n                render={renderProps => (\r\n                    <VCERNButton\r\n                        fullWidth\r\n                        className={classes.continueButton}\r\n                        onClick={renderProps.onClick}\r\n                        background=\"#F44336\"\r\n                        value=\"Continue with Google\"\r\n                        startIcon={icons.facebook}\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <FacebookLogin\r\n                appId={process.env.REACT_APP_FACEBOOK_AUTH_API}\r\n                callback={handleSocialAuth}\r\n                render={renderProps => (\r\n                    <VCERNButton\r\n                        fullWidth\r\n                        startIcon={icons.facebook}\r\n                        className={classes.continueButton}\r\n                        onClick={renderProps.onClick}\r\n                        background=\"#1873EB\"\r\n                        value=\"Continue with Facebook\"\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <VCERNTypography align=\"center\" variant=\"body1\">\r\n                You have already an accout?{' '}\r\n                <VCERNTypography component=\"span\" variant=\"body1\" color=\"secondary\" className={classes.underline} value=\"LOGIN\" onClick={() => history.push('/login')} />\r\n            </VCERNTypography>\r\n        </div>\r\n    );\r\n\r\n    const step2 = (\r\n        <div className={classes.container}>\r\n            <VCERNTypography variant=\"h4\" className={classes.text} value=\"Organization's Information\" />\r\n\r\n            <Stepper color=\"secondary\" activeStep={activeStep} alternativeLabel className={classes.stepper}>\r\n                {organizationSteps.map(label => (\r\n                    <Step key={label}>\r\n                        <StepLabel>{label}</StepLabel>\r\n                    </Step>\r\n                ))}\r\n            </Stepper>\r\n\r\n            <VCERNTypography variant=\"h6\" className={classes.title} value=\"Organization\" />\r\n\r\n            <VCERNTextField label=\"Organization name *\" icon={icons.person} className={classes.input} value={name} name=\"name\" onChange={handleOnChange} />\r\n\r\n            <InputMask mask=\"(+1) 999 999 99 99\" className={classes.input} value={phone} onChange={c => setData({ ...data, phone: c.target.value })} maskChar=\" \">\r\n                {() => <VCERNTextField label=\"Organizaton Phone Number *\" icon={icons.phone} />}\r\n            </InputMask>\r\n\r\n            <VCERNTypography variant=\"h6\" className={classes.title} value=\"Organization Address\" />\r\n\r\n            <VCERNTextField label=\"Street address *\" icon={icons.street} className={classes.input} value={street_address} name=\"street_address\" onChange={handleOnChange} />\r\n            <VCERNTextField label=\"APT\" icon={icons.apt} className={classes.input} value={apt} name=\"apt\" onChange={handleOnChange} />\r\n            <VCERNAutocomplete\r\n                value={state}\r\n                label=\"State *\"\r\n                icon={icons.state}\r\n                options={statesList}\r\n                className={classes.input}\r\n                onChange={(evt, val) => setData({ ...data, state: val })}\r\n            />\r\n            <VCERNAutocomplete\r\n                value={city}\r\n                disabled={!state}\r\n                label=\"City/Town *\"\r\n                icon={icons.city}\r\n                options={citiesList(state)}\r\n                className={classes.input}\r\n                onChange={(evt, val) => setData({ ...data, city: val })}\r\n            />\r\n\r\n            <InputMask mask=\"99999-9999\" className={classes.input} value={zip_code} onChange={c => setData({ ...data, zip_code: c.target.value })} maskChar={null}>\r\n                {() => <VCERNTextField label=\"Zip Code *\" icon={icons.zip} />}\r\n            </InputMask>\r\n\r\n            <div className={classes.inline}>\r\n                <div style={{ width: '46%' }}>\r\n                    <VCERNButton fullWidth color=\"secondary\" value=\"Previous\" className={classes.continueButton} onClick={() => setActiveStep(0)} />\r\n                </div>\r\n                <div style={{ width: '46%' }}>\r\n                    <VCERNButton fullWidth value=\"Continue\" className={classes.continueButton} onClick={handleStep2Next} />\r\n                </div>\r\n            </div>\r\n\r\n            <VCERNTypography align=\"center\" variant=\"body1\">\r\n                You have already an accout?{' '}\r\n                <VCERNTypography component=\"span\" variant=\"body1\" color=\"secondary\" className={classes.underline} value=\"LOGIN\" onClick={() => history.push('/login')} />\r\n            </VCERNTypography>\r\n        </div>\r\n    );\r\n\r\n    const step3 = (\r\n        <div className={classes.container}>\r\n            <VCERNTypography variant=\"h4\" className={classes.text} value=\"Contact Person\" />\r\n\r\n            <Stepper color=\"secondary\" activeStep={activeStep} alternativeLabel className={classes.stepper}>\r\n                {organizationSteps.map(label => (\r\n                    <Step key={label}>\r\n                        <StepLabel>{label}</StepLabel>\r\n                    </Step>\r\n                ))}\r\n            </Stepper>\r\n\r\n            <VCERNTypography align=\"center\" variant=\"body1\">\r\n                Don’t have your Agent information?{' '}\r\n                <VCERNTypography component=\"span\" variant=\"body1\" color=\"secondary\" className={classes.underline} value=\"SKIP\" onClick={() => setActiveStep(3)} />\r\n            </VCERNTypography>\r\n\r\n            <VCERNTypography variant=\"body2\" className={classes.text} value=\"Add a Contact Person\" />\r\n\r\n            <VCERNTextField label=\"First Name\" icon={icons.person} className={classes.input} value={p1_first_name} name=\"p1_first_name\" onChange={handleOnChange} />\r\n            <VCERNTextField label=\"Last Name\" icon={icons.person} className={classes.input} value={p1_last_name} name=\"p1_last_name\" onChange={handleOnChange} />\r\n            <VCERNTextField label=\"Email\" icon={icons.email} className={classes.input} value={p1_email} name=\"p1_email\" onChange={handleOnChange} />\r\n\r\n            <InputMask mask=\"(+1) 999 999 99 99\" className={classes.input} value={p1_phone} onChange={c => setData({ ...data, p1_phone: c.target.value })} maskChar=\" \">\r\n                {() => <VCERNTextField label=\"Phone Number *\" icon={icons.phone} />}\r\n            </InputMask>\r\n\r\n            {/* <VCERNTypography variant=\"body2\" className={classes.text} value=\"Registrant Agent information\" />\r\n\r\n            <VCERNTextField\r\n                label=\"First Name\"\r\n                icon={icons.person}\r\n                className={classes.input}\r\n                value={p2_first_name}\r\n                name=\"p2_first_name\"\r\n                onChange={handleOnChange}\r\n            />\r\n            <VCERNTextField label=\"Last Name\" icon={icons.person} className={classes.input} value={p2_last_name} name=\"p2_last_name\" onChange={handleOnChange} />\r\n            <VCERNTextField label=\"Email\" icon={icons.email} className={classes.input} value={p2_email} name=\"p2_email\" onChange={handleOnChange} />\r\n            <VCERNTextField label=\"Phone Number\" icon={icons.phone} className={classes.input} value={p2_phone} name=\"p2_phone\" onChange={handleOnChange} /> */}\r\n\r\n            <div className={classes.inline}>\r\n                <div style={{ width: '46%' }}>\r\n                    <VCERNButton fullWidth color=\"secondary\" value=\"Previous\" className={classes.continueButton} onClick={() => setActiveStep(1)} />\r\n                </div>\r\n                <div style={{ width: '46%' }}>\r\n                    <VCERNButton fullWidth value=\"Continue\" className={classes.continueButton} onClick={handleStep3Next} />\r\n                </div>\r\n            </div>\r\n\r\n            <VCERNTypography align=\"center\" variant=\"body1\">\r\n                You have already an accout?{' '}\r\n                <VCERNTypography component=\"span\" variant=\"body1\" color=\"secondary\" className={classes.underline} value=\"LOGIN\" onClick={() => history.push('/login')} />\r\n            </VCERNTypography>\r\n        </div>\r\n    );\r\n\r\n    const step4 = (\r\n        <div className={classes.container}>\r\n            <VCERNTypography variant=\"h4\" className={classes.text} value=\"Payment Information\" />\r\n\r\n            <Stepper color=\"secondary\" activeStep={activeStep} alternativeLabel className={classes.stepper}>\r\n                {organizationSteps.map(label => (\r\n                    <Step key={label}>\r\n                        <StepLabel>{label}</StepLabel>\r\n                    </Step>\r\n                ))}\r\n            </Stepper>\r\n\r\n            <VCERNTypography variant=\"body2\" className={classes.text} value=\"To complete registration, please have beneficiary contact information and debit/credit card handy\" />\r\n\r\n            <div className={classes.inline}>\r\n                <VCERNTypography variant=\"body1\" className={classes.text} value=\"Credit/Debit Card\" />\r\n                <img src={cardsPic} alt=\"cards\" className={classes.cardsPic} />\r\n            </div>\r\n            <VCERNTypography variant=\"body1\" className={classes.text} value=\"Summary\" />\r\n\r\n            <VCERNTypography variant=\"body1\" className={classes.text}>\r\n                App Setup Fee: <VCERNTypography variant=\"body1\" component=\"span\" value={`$${organizationSubscriptionPrice}/yr`} />\r\n            </VCERNTypography>\r\n\r\n            <VCERNTypography variant=\"body1\" className={classes.text} value=\"You will be charged a one time fee of $399 by vCERN to setup your plateform.\" />\r\n\r\n            <CardElement\r\n                className={classes.card}\r\n                options={{\r\n                    iconStyle: 'solid',\r\n                    style: {\r\n                        base: {\r\n                            fontSize: '16px',\r\n                            fontSmoothing: 'antialiased',\r\n                        },\r\n                        invalid: {\r\n                            iconColor: 'red',\r\n                            color: 'red',\r\n                        },\r\n                    },\r\n                }}\r\n            />\r\n\r\n            <div className={classes.remberMeContainer}>\r\n                <Checkbox color=\"secondary\" value={agreedTerms} checked={agreedTerms} onChange={evt => setData({ ...data, agreedTerms: evt.target.checked })} />\r\n                <VCERNTypography variant=\"body1\" className={classes.text}>\r\n                    I agree with All{' '}\r\n                    <VCERNTypography\r\n                        variant=\"body1\"\r\n                        color=\"secondary\"\r\n                        component=\"span\"\r\n                        className={classes.underline}\r\n                        value=\"Terms & Conditions\"\r\n                        onClick={() => history.push('/terms-and-conditions')}\r\n                    />{' '}\r\n                    and{' '}\r\n                    <VCERNTypography\r\n                        variant=\"body1\"\r\n                        component=\"span\"\r\n                        color=\"secondary\"\r\n                        className={classes.underline}\r\n                        value=\"Payment agreements\"\r\n                        onClick={() => history.push('/payment-agreements')}\r\n                    />\r\n                </VCERNTypography>\r\n            </div>\r\n\r\n            <div className={classes.inline}>\r\n                <div style={{ width: '46%' }}>\r\n                    <VCERNButton fullWidth color=\"secondary\" value=\"Previous\" className={classes.continueButton} onClick={() => setActiveStep(2)} />\r\n                </div>\r\n                <div style={{ width: '46%' }}>\r\n                    <VCERNButton fullWidth value=\"Continue\" className={classes.continueButton} onClick={handleSubmit} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <Grid container component=\"main\" className={classes.root}>\r\n            <Grid item xs={12} sm={8} md={7} component={Paper} className={classes.paper}>\r\n                <div className={classes.container}>{activeStep === 0 ? step1 : activeStep === 1 ? step2 : activeStep === 2 ? step3 : step4}</div>\r\n            </Grid>\r\n            <Grid item xs={false} sm={4} md={5} alignContent=\"center\" className={classes.image}>\r\n                <img src={logo} alt=\"logo\" className={classes.logo} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\nexport default connect(data => data, { register: AC.register, setError: AC.setError })(OrganizationRegister);\r\n","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\user\\Register.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\Loader.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\loader.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\user\\Dashboard.js",["307"],"import { Divider, Grid, LinearProgress, makeStyles, Paper } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nimport VCERNButton from '../../common/elements/VCERNButton';\r\n\r\nimport VCERNPieChart from '../../common/elements/VCERNPieChart';\r\nimport VCERNTypography from '../../common/elements/VCERNTypography';\r\n\r\nimport giftPic from '../../common/assets/others/gift.png';\r\nimport waitingPic from '../../common/assets/others/dashboard-waiting.jpg';\r\nimport contributePic from '../../common/assets/others/contribute.png';\r\nimport payoutPic from '../../common/assets/others/payout.png';\r\nimport { connect } from 'react-redux';\r\n\r\nconst minHeight = 300;\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: { padding: theme.spacing(2), display: 'flex', flexDirection: 'column', minHeight: minHeight, maxHeight: '100%' },\r\n    waitingPic: { height: 400, maxWidth: '98%', [theme.breakpoints.down('sm')]: { height: 280 } },\r\n\r\n    innerBox: { padding: '40px 50px', [theme.breakpoints.down('sm')]: { padding: 0 } },\r\n    text: { margin: '30px 0', color: 'white' },\r\n    infoText: { cursor: 'pointer', textDecoration: 'underline' },\r\n\r\n    hideOnSm: { [theme.breakpoints.down('sm')]: { display: 'none' } },\r\n\r\n    contributeBox: { display: 'flex', justifyContent: 'center', alignitems: 'center', borderBottom: '1px solid #BFC2D6', width: '100%', paddingBottom: 20 },\r\n    icon: { height: 50, width: 50, marginRight: 20 },\r\n\r\n    inviteBox: { padding: theme.spacing(2), display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', minHeight: minHeight, maxHeight: '100%' },\r\n    invitePic: { height: 90, width: 90 },\r\n    inviteText: { fontWeight: 'bold', marginTop: 10, textAlign: 'center' },\r\n    graphText: { fontWeight: 'bold', marginBottom: 10, textAlign: 'center' },\r\n\r\n    continueButton: { margin: '10px 0' },\r\n    aboutPic: { height: 375, width: 'auto', maxWidth: '100%' },\r\n}));\r\n\r\nfunction Dashboard({}) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n                <Paper className={classes.paper} style={{ background: '#0191DA' }}>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12} md={6} lg={4} className={classes.hideOnSm}>\r\n                            <Paper className={classes.paper}>\r\n                                <img src={waitingPic} alt=\"waiting\" className={classes.waitingPic} />\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6} lg={8}>\r\n                            {/* <VCERNTypography className={classes.infoText} variant=\"body1\" color=\"secondary\" align=\"right\" value=\"What is this?\" /> */}\r\n                            <div className={classes.innerBox}>\r\n                                <VCERNTypography className={classes.text} variant=\"h4\" align=\"center\" value=\"Hey! You’re in the waiting pool now!\" />\r\n                                <VCERNTypography className={classes.text} variant=\"h5\" align=\"center\">\r\n                                    Profile status:\r\n                                    <VCERNTypography color=\"secondary\" value=\" Pending\" />\r\n                                </VCERNTypography>\r\n                                <VCERNTypography className={classes.text} variant=\"h5\" align=\"center\" value=\"23 days remaining to unlock!\" />\r\n                                <LinearProgress variant=\"determinate\" color=\"secondary\" value={70} />\r\n                                <VCERNTypography className={classes.text} variant=\"body2\" align=\"center\">\r\n                                    <VCERNTypography color=\"secondary\" value=\"67 of \" />\r\n                                    90 days completed\r\n                                </VCERNTypography>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n                <iframe title=\"video\" width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/tgbNymZ7vqY\" />\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n                <Paper className={classes.paper}>\r\n                    <VCERNTypography variant=\"body1\" className={classes.graphText} value=\"Total Members: 2032\" />\r\n                    <VCERNPieChart />\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n                <Paper className={classes.inviteBox}>\r\n                    <div className={classes.contributeBox}>\r\n                        <img src={contributePic} alt=\"contribute\" className={classes.icon} />\r\n                        <div>\r\n                            <VCERNTypography variant=\"body1\" className={classes.inviteText} value=\"Contribution: $20\" />\r\n                            <VCERNTypography variant=\"body2\" className={classes.inviteText} value=\"I’ll donate each time\" customColor=\"#6F7F9F\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.contributeBox} style={{ borderBottom: 0, marginTop: 20 }}>\r\n                        <img src={payoutPic} alt=\"contribute\" className={classes.icon} />\r\n                        <div>\r\n                            <VCERNTypography variant=\"body1\" className={classes.inviteText} value=\"Payout: $20,000\" />\r\n                            <VCERNTypography variant=\"body2\" className={classes.inviteText} value=\"I’ll receive\" customColor=\"#6F7F9F\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <VCERNButton fullWidth value=\"Continue\" className={classes.continueButton} />\r\n                    <Divider />\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n                <Paper className={classes.inviteBox}>\r\n                    <img src={giftPic} alt=\"invite\" className={classes.invitePic} />\r\n                    <VCERNTypography className={classes.inviteText} variant=\"h5\" value=\"Get $10\" />\r\n                    <VCERNTypography className={classes.inviteText} variant=\"body2\" value=\"You’ll both get $10 in free When your friend Join in the pool\" customColor=\"#6F7F9F\" />\r\n                    <VCERNTypography className={classes.inviteText} variant=\"body1\" value=\"Help your pool grow faster by inviting family and friends!\" />\r\n                    <VCERNButton fullWidth value=\"Continue\" className={classes.continueButton} />\r\n                </Paper>\r\n            </Grid>\r\n            <VCERNTypography variant=\"h5\" className={classes.inviteText} value=\"About us\" />\r\n            <Grid container spacing={3} style={{ margin: '20px 0' }}>\r\n                <Grid item xs={12} md={4}>\r\n                    <img src={waitingPic} alt=\"waiting\" className={classes.aboutPic} />\r\n                </Grid>\r\n                <Grid item xs={12} md={8}>\r\n                    <VCERNTypography\r\n                        variant=\"body1\"\r\n                        customColor=\"#6F7F9F\"\r\n                        value=\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\"\r\n                    />\r\n                    <VCERNTypography variant=\"body1\" className={classes.inviteText} value=\"Read More\" />\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\nexport default connect(state => state)(Dashboard);\r\n","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\Header.js",["308","309"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNLineChart.js",[],["310","311"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNPieChart.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\organization\\Dashboard.js",["312","313","314","315"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNGroupAvatar.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\ResetPassword.js",[],["316","317"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\ForgotPassword.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\Verify.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\icons.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNAvatar.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\helper.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\FileMessage.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNModal.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\Tickets.js",["318","319","320","321","322","323","324","325"],"import { Grid, makeStyles } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nimport VCERNButton from '../common/elements/VCERNButton';\r\nimport VCERNTypography from '../common/elements/VCERNTypography';\r\nimport icons, { Attach, BackArrow, Send, Add } from '../common/icons';\r\n\r\nimport { connect } from 'react-redux';\r\nimport VCERNTextField from '../common/elements/VCERNTextField';\r\nimport VCERNAvatar from '../common/elements/VCERNAvatar';\r\nimport VCERNModal from '../common/elements/VCERNModal';\r\n\r\nimport cx from 'clsx';\r\n\r\nimport {\r\n    sendMessage,\r\n    join,\r\n    onJoin,\r\n    onRoomJoin,\r\n    onChatsUpdate,\r\n    onMessageRecieved,\r\n    disconnectSocket,\r\n    joinRoom,\r\n    endTicket,\r\n    onTicketEnded,\r\n    createTicket,\r\n    onTicketCreated,\r\n    onMessageSeen,\r\n    leaveRoom,\r\n} from '../common/socketChat';\r\n\r\nimport { getDateTime, timeDiffFromNow } from '../common/helper';\r\nimport AC from '../redux/actions/actionCreater';\r\nimport FileMessage from '../common/FileMessage';\r\nimport constants from '../common/constants';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    mainBox: { height: '80vh' },\r\n\r\n    chatListBox: { border: '1px solid #BFC1D6', height: 'calc(80vh - 50px)' },\r\n    newChatBox: { background: '#0191DA', display: 'flex', justifyContent: 'space-between', alignItems: 'center', color: 'white', height: '60px', padding: 20 },\r\n    boldText: { fontWeight: 'bold' },\r\n    input: { height: '50px' },\r\n    newTicketInput: { margin: '10px 0' },\r\n\r\n    chatLists: { overflowY: 'auto', height: 'calc(80vh - 110px)' },\r\n    chatBox: { background: 'none', padding: 10, display: 'flex', alignItems: 'center', cursor: 'pointer' },\r\n    activeChatBox: { background: '#ECEFF9', padding: 10, display: 'flex', alignItems: 'center', cursor: 'pointer' },\r\n    inline: { display: 'flex', alignItems: 'center', justifyContent: 'space-between' },\r\n    displayPicture: { marginRight: 15, height: 50, width: 50 },\r\n    otherDisplayPicture: { marginLeft: 15, height: 50, width: 50 },\r\n    displayPictureToOpen: { marginRight: 15, height: 50, width: 50, cursor: 'pointer' },\r\n    clipedText: { whiteSpace: 'nowrap', width: 180, overflow: 'hidden', textOverflow: 'ellipsis' },\r\n    backIcon: { display: 'none', [theme.breakpoints.down('sm')]: { display: 'block' } },\r\n\r\n    newChatIcon: { cursor: 'pointer' },\r\n\r\n    conversationBox: { border: '1px solid #BFC1D6', height: '80vh' },\r\n    infoBox: { padding: 15, display: 'flex', alignItems: 'center', borderBottom: '1px solid #BFC1D6', height: 80 },\r\n    messages: { overflowY: 'auto', height: 'calc(80vh - 300px)' },\r\n\r\n    ticketInfo: { padding: 15, display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', borderBottom: '1px solid #BFC1D6', height: 160 },\r\n\r\n    myMessageBox: { padding: '10px 20px', display: 'flex', alignItems: 'flex-end' },\r\n    myMessageText: { background: '#ECEFF9', maxWidth: 400, borderRadius: '15px 15px 15px 0px', padding: 10 },\r\n    otherMessageBox: { padding: '10px 20px', display: 'flex', flexDirection: 'row-reverse', alignItems: 'flex-end' },\r\n    otherMessageText: { background: '#0191DA', maxWidth: 400, borderRadius: '15px 15px 0px 15px', padding: 10, color: 'white' },\r\n\r\n    newMessageBox: { height: 50, border: '1px solid #BFC1D6', marginBottom: 10, borderRadius: 25, paddingLeft: 20, display: 'flex', alignItems: 'center', margin: '0 20px' },\r\n    attachIcon: { cursor: 'pointer', margin: '0 10px', display: 'flex', alignItems: 'center', [theme.breakpoints.down('sm')]: { margin: '0 5px' } },\r\n    send: { background: '#0191DA', height: 50, width: 50, display: 'flex', justifyContent: 'center', alignItems: 'center', color: 'white', borderRadius: 25, cursor: 'pointer' },\r\n    sendInput: { border: 'none', outline: 'none', flexGrow: 1, minWidth: 40 },\r\n\r\n    hideOnSm: { [theme.breakpoints.down('sm')]: { display: 'none' } },\r\n    unreadBadge: { height: 10, width: 10, background: '#FE9900', borderRadius: 50 },\r\n}));\r\n\r\nfunction Tickets({ currentUser, type, getPreSignedLink, uploadFile }) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const { _id, organization } = currentUser;\r\n\r\n    const [showList, setShowList] = useState(true);\r\n    const [showNewTicketModal, setShowNewTicketModal] = useState(false);\r\n    const [currentChatIdx, setCurrentChatIdx] = useState(0);\r\n    const [currentChat, setCurrentChat] = useState([]);\r\n    const [allChats, setAllChats] = useState([]);\r\n    const [filteredChats, setFilteredChats] = useState([]);\r\n    const [state, setState] = useState({ message: '', search: '', subject: '', newTicket: '' });\r\n\r\n    const { message, search, subject, newTicket } = state;\r\n    useEffect(() => {\r\n        join(type === constants.USER_TYPE_VCERN ? 'vcern_admin' : type, _id, organization);\r\n        onJoin(\r\n            val => setAllChats(val),\r\n            val => setFilteredChats(val),\r\n            val => setCurrentChatIdx(val),\r\n            true,\r\n        );\r\n        onChatsUpdate(val => {\r\n            setAllChats(prevChat =>\r\n                prevChat.map(e =>\r\n                    e._id === val.ticket._id ? { ...e, last_message: val.ticket.last_message, messages: [...e.messages, val.ticket.last_message], seen: val.ticket.seen } : e,\r\n                ),\r\n            );\r\n            setFilteredChats(prevChat =>\r\n                prevChat.map(e =>\r\n                    e._id === val.ticket._id ? { ...e, last_message: val.ticket.last_message, messages: [...e.messages, val.ticket.last_message], seen: val.ticket.seen } : e,\r\n                ),\r\n            );\r\n        });\r\n        onRoomJoin();\r\n        onMessageSeen(val => {\r\n            setAllChats(prevChat => prevChat.map(e => (e._id === val.ticket._id ? { ...e, seen: val.ticket.seen } : e)));\r\n            setFilteredChats(prevChat => prevChat.map(e => (e._id === val.ticket._id ? { ...e, seen: val.ticket.seen } : e)));\r\n        });\r\n        joinRoom(currentChat?._id);\r\n        onMessageRecieved(val => setCurrentChat(prevChat => ({ ...prevChat, messages: [...prevChat.messages, val] })));\r\n        onTicketEnded(val => {\r\n            setCurrentChat(val);\r\n            setFilteredChats(prevTickets => prevTickets.map(e => (e._id === val._id ? { ...e, open: false } : e)));\r\n            setAllChats(prevTickets => prevTickets.map(e => (e._id === val._id ? { ...e, open: false } : e)));\r\n        });\r\n        onTicketCreated(\r\n            val => setAllChats(prevTickets => [...prevTickets, val]),\r\n            val => setFilteredChats(prevTickets => [...prevTickets, val]),\r\n            val => {},\r\n        );\r\n        return () => disconnectSocket();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const messages = document.getElementById('messages');\r\n        messages.scrollTop = messages.scrollHeight;\r\n    }, [currentChat?.messages?.length]);\r\n\r\n    useEffect(() => {\r\n        setFilteredChats(allChats.filter(el => el.name.toLowerCase().includes(search.toLowerCase())));\r\n    }, [search.length]);\r\n\r\n    useEffect(() => {\r\n        setCurrentChat(filteredChats.find(el => el._id === currentChatIdx));\r\n    }, [currentChatIdx]);\r\n\r\n    const handleOnChange = evt => {\r\n        const { name, value } = evt.target;\r\n        setState({ ...state, [name]: value });\r\n    };\r\n\r\n    const handleSend = (message, files = []) => {\r\n        sendMessage(message, files, currentChat?._id, 'ticket');\r\n        setState({ ...state, message: '' });\r\n    };\r\n\r\n    const handleAttachment = evt => {\r\n        const files = [...evt.target.files];\r\n        files.map(el => {\r\n            const { name, type } = el;\r\n            getPreSignedLink({ name, type }, url => uploadFile({ url, file: el, type }, () => handleSend('File Attached', [{ url: url.split('?')[0], fileType: type }])));\r\n        });\r\n    };\r\n\r\n    const handleToggleChat = idx => {\r\n        setShowList(false);\r\n        leaveRoom(currentChatIdx);\r\n        joinRoom(idx);\r\n        setCurrentChatIdx(idx);\r\n    };\r\n\r\n    const handleCloseTicket = () => {\r\n        endTicket(currentChat._id);\r\n    };\r\n\r\n    const handleCreateNewTicket = () => {\r\n        setShowNewTicketModal(false);\r\n        createTicket(subject, organization, newTicket);\r\n        setState({ ...state, newTicket: '', subject: '' });\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.mainBox}>\r\n            <Grid item xs={12} md={3} className={!showList && classes.hideOnSm}>\r\n                <div className={classes.input}>\r\n                    <VCERNTextField label=\"Search\" icon={icons.search} value={search} name=\"search\" onChange={handleOnChange} />\r\n                </div>\r\n                <div className={classes.chatListBox}>\r\n                    <div className={classes.newChatBox}>\r\n                        <VCERNTypography variant=\"body1\" value=\"Tickets\" className={classes.boldText} />\r\n                        {type === constants.USER_TYPE_ORG && <Add className={classes.newChatIcon} onClick={() => setShowNewTicketModal(true)} />}\r\n                    </div>\r\n                    <div className={classes.chatLists}>\r\n                        {filteredChats.map(el => (\r\n                            <div key={el._id} className={el._id === currentChatIdx ? classes.activeChatBox : classes.chatBox} onClick={() => handleToggleChat(el._id)}>\r\n                                <VCERNAvatar src={el.image} className={classes.displayPicture} />\r\n                                <div style={{ flexGrow: 1 }}>\r\n                                    <div className={classes.inline}>\r\n                                        <VCERNTypography variant=\"body1\" value={el.name} className={classes.boldText} />\r\n                                        {!el.seen && <div className={classes.unreadBadge} />}\r\n                                    </div>\r\n                                    <div className={classes.inline}>\r\n                                        <div className={classes.clipedText}>{el.organization_name || 'Organization Name'}</div>\r\n                                        <VCERNTypography variant=\"body2\" value={timeDiffFromNow(el.last_message.timestamp)} customColor=\"#657285\" />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={12} md={9}>\r\n                <div className={cx(classes.conversationBox, { [classes.hideOnSm]: showList })}>\r\n                    <div className={classes.infoBox}>\r\n                        <BackArrow onClick={() => setShowList(true)} className={classes.backIcon} />\r\n                        <VCERNAvatar src={currentChat?.image} className={classes.displayPictureToOpen} />\r\n                        <VCERNTypography variant=\"body1\" value={currentChat?.organization_name} className={classes.boldText} />\r\n                    </div>\r\n                    <div className={classes.ticketInfo}>\r\n                        <VCERNTypography variant=\"h6\" value={currentChat?.subject} className={classes.boldText} />\r\n                        <VCERNTypography variant=\"body1\" value={`Ticket Number #${currentChat?.number}`} className={classes.boldText} />\r\n                        <VCERNTypography variant=\"body1\" className={classes.boldText}>\r\n                            Status:{' '}\r\n                            <VCERNTypography\r\n                                variant=\"body1\"\r\n                                value={currentChat?.open ? 'Open' : 'Closed'}\r\n                                component=\"span\"\r\n                                className={classes.boldText}\r\n                                customColor={currentChat?.open ? '#089156' : '#CE2E2E'}\r\n                            />\r\n                        </VCERNTypography>\r\n                        {currentChat?.open ? (\r\n                            <VCERNButton value=\"Close Ticket\" background=\"#CE2E2E\" rounded onClick={handleCloseTicket} />\r\n                        ) : (\r\n                            <VCERNTypography variant=\"body1\" className={classes.boldText}>\r\n                                Closed By: <VCERNTypography variant=\"body1\" value={currentChat?.closed_by} component=\"span\" className={classes.boldText} />\r\n                            </VCERNTypography>\r\n                        )}\r\n                    </div>\r\n                    <div className={classes.messages} id=\"messages\" style={{ height: !currentChat?.open ? 'calc(80vh - 250px)' : 'calc(80vh - 300px)' }}>\r\n                        {currentChat?.messages?.map((el, idx) => (\r\n                            <div key={idx}>\r\n                                {(type == constants.USER_TYPE_ORG ? el.from.message_type == constants.USER_TYPE_ORG : el.from.message_type == 'vcern_admin') ? (\r\n                                    <div className={classes.myMessageBox}>\r\n                                        <VCERNAvatar src={el.from.image} className={classes.displayPicture} />\r\n                                        {!el.files.length ? (\r\n                                            <div className={classes.myMessageText}>\r\n                                                {el.message}\r\n                                                <br />\r\n                                                <VCERNTypography variant=\"caption\" value={getDateTime(el.timestamp)} customColor=\"#657285\" />\r\n                                            </div>\r\n                                        ) : (\r\n                                            <FileMessage className={classes.myMessageText} message={el}>\r\n                                                <VCERNTypography variant=\"caption\" value={getDateTime(el.timestamp)} customColor=\"#657285\" />\r\n                                            </FileMessage>\r\n                                        )}\r\n                                    </div>\r\n                                ) : (\r\n                                    <div className={classes.otherMessageBox}>\r\n                                        <VCERNAvatar src={el.from.image} className={classes.otherDisplayPicture} />\r\n                                        {!el.files.length ? (\r\n                                            <div className={classes.otherMessageText}>\r\n                                                {el.message}\r\n                                                <br />\r\n                                                <VCERNTypography variant=\"caption\" value={getDateTime(el.timestamp)} />\r\n                                            </div>\r\n                                        ) : (\r\n                                            <FileMessage className={classes.otherMessageText} message={el}>\r\n                                                <VCERNTypography variant=\"caption\" value={getDateTime(el.timestamp)} />\r\n                                            </FileMessage>\r\n                                        )}\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    {currentChat?.open && (\r\n                        <div className={classes.newMessageBox}>\r\n                            <input className={classes.sendInput} placeholder=\"Type your message here.......\" value={message} name=\"message\" onChange={handleOnChange} />\r\n                            <label htmlFor=\"upload-photo\" className={classes.attachIcon}>\r\n                                <Attach />\r\n                            </label>\r\n                            <input id=\"upload-photo\" type=\"file\" style={{ display: 'none' }} onChange={handleAttachment} multiple />\r\n                            <div onClick={() => handleSend(message)} className={classes.send}>\r\n                                <Send />\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </Grid>\r\n\r\n            <VCERNModal\r\n                title=\"Submit a New Ticket\"\r\n                open={showNewTicketModal}\r\n                onClose={() => setShowNewTicketModal(false)}\r\n                onConfirm={handleCreateNewTicket}\r\n                buttonTittle=\"Generate Ticket\"\r\n            >\r\n                <VCERNTextField placeholder=\"Subject\" value={subject} name=\"subject\" onChange={handleOnChange} className={classes.newTicketInput} />\r\n                <VCERNTextField multiline rows={5} placeholder=\"Body\" value={newTicket} name=\"newTicket\" onChange={handleOnChange} className={classes.newTicketInput} />\r\n            </VCERNModal>\r\n        </Grid>\r\n    );\r\n}\r\nexport default connect(state => state, { getPreSignedLink: AC.getPreSignedLink, uploadFile: AC.uploadFile })(Tickets);\r\n","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\Messages.js",["326","327","328","329","330","331","332","333","334","335"],"import { Grid, makeStyles } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport VCERNTypography from '../common/elements/VCERNTypography';\r\nimport icons, { Attach, BackArrow, Send } from '../common/icons';\r\n\r\nimport { connect } from 'react-redux';\r\nimport VCERNTextField from '../common/elements/VCERNTextField';\r\nimport VCERNAvatar from '../common/elements/VCERNAvatar';\r\n\r\nimport cx from 'clsx';\r\n\r\nimport { sendMessage, join, onJoin, onRoomJoin, onChatsUpdate, onMessageRecieved, disconnectSocket, joinRoom, onMessageSeen, leaveRoom } from '../common/socketChat';\r\nimport { getDateTime, timeDiffFromNow } from '../common/helper';\r\nimport AC from '../redux/actions/actionCreater';\r\nimport FileMessage from '../common/FileMessage';\r\nimport constants from '../common/constants';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    mainBox: { height: '80vh' },\r\n\r\n    chatListBox: { border: '1px solid #BFC1D6', height: 'calc(80vh - 50px)' },\r\n    newChatBox: { background: '#0191DA', display: 'flex', justifyContent: 'space-between', alignItems: 'center', color: 'white', height: '60px', padding: 20 },\r\n    boldText: { fontWeight: 'bold' },\r\n    input: { height: '50px' },\r\n\r\n    chatLists: { overflowY: 'auto', height: 'calc(80vh - 110px)' },\r\n    chatBox: { background: 'none', padding: 10, display: 'flex', alignItems: 'center', cursor: 'pointer' },\r\n    activeChatBox: { background: '#ECEFF9', padding: 10, display: 'flex', alignItems: 'center', cursor: 'pointer' },\r\n    inline: { display: 'flex', alignItems: 'center', justifyContent: 'space-between' },\r\n    displayPicture: { marginRight: 15, height: 50, width: 50 },\r\n    otherDisplayPicture: { marginLeft: 15, height: 50, width: 50 },\r\n    displayPictureToOpen: { marginRight: 15, height: 50, width: 50, cursor: 'pointer' },\r\n    clipedText: { whiteSpace: 'nowrap', width: 180, overflow: 'hidden', textOverflow: 'ellipsis' },\r\n    backIcon: { display: 'none', [theme.breakpoints.down('sm')]: { display: 'block' } },\r\n\r\n    conversationBox: { border: '1px solid #BFC1D6', height: '80vh' },\r\n    infoBox: { padding: 15, display: 'flex', alignItems: 'center', borderBottom: '1px solid #BFC1D6', height: 80 },\r\n    messages: { overflowY: 'auto', height: 'calc(80vh - 140px)' },\r\n\r\n    myMessageBox: { padding: '10px 20px', display: 'flex', alignItems: 'flex-end' },\r\n    myMessageText: { background: '#ECEFF9', maxWidth: 400, borderRadius: '15px 15px 15px 0px', padding: 10 },\r\n    otherMessageBox: { padding: '10px 20px', display: 'flex', flexDirection: 'row-reverse', alignItems: 'flex-end' },\r\n    otherMessageText: { background: '#0191DA', maxWidth: 400, borderRadius: '15px 15px 0px 15px', padding: 10, color: 'white' },\r\n\r\n    newMessageBox: { height: 50, border: '1px solid #BFC1D6', marginBottom: 10, borderRadius: 25, paddingLeft: 20, display: 'flex', alignItems: 'center', margin: '0 20px' },\r\n    attachIcon: { cursor: 'pointer', margin: '0 10px', display: 'flex', alignItems: 'center', [theme.breakpoints.down('sm')]: { margin: '0 5px' } },\r\n    send: { background: '#0191DA', height: 50, width: 50, display: 'flex', justifyContent: 'center', alignItems: 'center', color: 'white', borderRadius: 25, cursor: 'pointer' },\r\n    sendInput: { border: 'none', outline: 'none', flexGrow: 1, minWidth: 40 },\r\n\r\n    hideOnSm: { [theme.breakpoints.down('sm')]: { display: 'none' } },\r\n    unreadBadge: { height: 10, width: 10, background: '#FE9900', borderRadius: 50 },\r\n}));\r\n\r\nfunction Messages({ currentUser, type, getPreSignedLink, uploadFile }) {\r\n    const classes = useStyles();\r\n\r\n    const { _id, organization } = currentUser;\r\n\r\n    const [showList, setShowList] = useState(true);\r\n    const [currentChatIdx, setCurrentChatIdx] = useState(0);\r\n    const [currentChat, setCurrentChat] = useState([]);\r\n    const [allChats, setAllChats] = useState([]);\r\n    const [filteredChats, setFilteredChats] = useState([]);\r\n    const [state, setState] = useState({ message: '', search: '' });\r\n\r\n    const { message, search } = state;\r\n    useEffect(() => {\r\n        join(type === constants.USER_TYPE_VCERN ? 'vcern_admin' : type, _id, organization);\r\n        onJoin(\r\n            val => setAllChats(val),\r\n            val => setFilteredChats(val),\r\n            val => setCurrentChatIdx(val),\r\n        );\r\n        onChatsUpdate(val => {\r\n            setAllChats(prevChat =>\r\n                prevChat.map(e =>\r\n                    e._id === val.conversation._id\r\n                        ? {\r\n                              ...e,\r\n                              last_message: val.conversation.last_message,\r\n                              messages: [...e.messages, val.conversation.last_message],\r\n                              seen: val.conversation.seen,\r\n                          }\r\n                        : e,\r\n                ),\r\n            );\r\n            setFilteredChats(prevChat =>\r\n                prevChat.map(e =>\r\n                    e._id === val.conversation._id\r\n                        ? { ...e, last_message: val.conversation.last_message, messages: [...e.messages, val.conversation.last_message], seen: val.conversation.seen }\r\n                        : e,\r\n                ),\r\n            );\r\n        });\r\n        onMessageSeen(val => {\r\n            setAllChats(prevChat => prevChat.map(e => (e._id === val.conversation._id ? { ...e, seen: val.conversation.seen } : e)));\r\n            setFilteredChats(prevChat =>\r\n                prevChat.map(e =>\r\n                    e._id === val.conversation._id\r\n                        ? {\r\n                              ...e,\r\n                              seen: val.conversation.seen,\r\n                          }\r\n                        : e,\r\n                ),\r\n            );\r\n        });\r\n        onRoomJoin();\r\n        joinRoom(currentChat?._id);\r\n        onMessageRecieved(val => setCurrentChat(prevChat => ({ ...prevChat, messages: [...prevChat.messages, val] })));\r\n        return () => disconnectSocket();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const messages = document.getElementById('messages');\r\n        messages.scrollTop = messages.scrollHeight;\r\n    }, [currentChat?.messages?.length]);\r\n\r\n    useEffect(() => {\r\n        setFilteredChats(allChats.filter(el => el.name.toLowerCase().includes(search.toLowerCase())));\r\n    }, [search.length]);\r\n\r\n    useEffect(() => {\r\n        setCurrentChat(filteredChats.find(el => el._id === currentChatIdx));\r\n    }, [currentChatIdx]);\r\n\r\n    const handleOnChange = evt => {\r\n        const { name, value } = evt.target;\r\n        setState({ ...state, [name]: value });\r\n    };\r\n\r\n    const handleSend = (message, files = []) => {\r\n        sendMessage(message, files, currentChat?._id);\r\n        setState({ ...state, message: '' });\r\n    };\r\n\r\n    const handleAttachment = evt => {\r\n        const files = [...evt.target.files];\r\n        files.map(el => {\r\n            const { name, type } = el;\r\n            getPreSignedLink({ name, type }, url => uploadFile({ url, file: el, type }, () => handleSend('File Attached', [{ url: url.split('?')[0], fileType: type }])));\r\n        });\r\n    };\r\n\r\n    const handleToggleChat = idx => {\r\n        leaveRoom(currentChatIdx);\r\n        setShowList(false);\r\n        setCurrentChatIdx(idx);\r\n        joinRoom(idx);\r\n    };\r\n\r\n    return (\r\n        <Grid container className={classes.mainBox}>\r\n            <Grid item xs={12} md={3} className={!showList && classes.hideOnSm}>\r\n                <div className={classes.input}>\r\n                    <VCERNTextField label=\"Search\" icon={icons.search} value={search} name=\"search\" onChange={handleOnChange} />\r\n                </div>\r\n                <div className={classes.chatListBox}>\r\n                    <div className={classes.newChatBox}>\r\n                        <VCERNTypography variant=\"body1\" value=\"Inbox\" className={classes.boldText} />\r\n                    </div>\r\n\r\n                    <div className={classes.chatLists}>\r\n                        {filteredChats.map(el => (\r\n                            <div key={el._id} className={el._id === currentChatIdx ? classes.activeChatBox : classes.chatBox} onClick={() => handleToggleChat(el._id)}>\r\n                                <VCERNAvatar src={el.image} className={classes.displayPicture} />\r\n                                <div style={{ flexGrow: 1 }}>\r\n                                    <div className={classes.inline}>\r\n                                        <VCERNTypography variant=\"body1\" value={el.name} className={classes.boldText} />\r\n                                        {!el.seen && <div className={classes.unreadBadge} />}\r\n                                    </div>\r\n                                    <div className={classes.inline}>\r\n                                        <div className={classes.clipedText}>{el.last_message.message}</div>\r\n                                        <VCERNTypography variant=\"body2\" value={timeDiffFromNow(el.last_message.timestamp)} customColor=\"#657285\" />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={12} md={9}>\r\n                <div className={cx(classes.conversationBox, { [classes.hideOnSm]: showList })}>\r\n                    <div className={classes.infoBox}>\r\n                        <BackArrow onClick={() => setShowList(true)} className={classes.backIcon} />\r\n                        <VCERNAvatar src={currentChat?.image} className={classes.displayPictureToOpen} />\r\n                        <VCERNTypography variant=\"body1\" value={currentChat?.name} className={classes.boldText} />\r\n                    </div>\r\n                    <div className={classes.messages} id=\"messages\">\r\n                        {currentChat?.messages?.map((el, idx) => (\r\n                            <div key={idx}>\r\n                                {/* (type == constants.USER_TYPE_ORG ? el.from.message_type == constants.USER_TYPE_ORG : el.from.message_type == 'vcern_admin') */}\r\n                                {(type == constants.USER_TYPE_ORG && el.from.message_type == constants.USER_TYPE_ORG) ||\r\n                                (type == constants.USER_TYPE_MEMBER && el.from.message_type == constants.USER_TYPE_MEMBER) ||\r\n                                (type == constants.USER_TYPE_VCERN && el.from.message_type == 'vcern_admin') ? (\r\n                                    <div className={classes.myMessageBox}>\r\n                                        <VCERNAvatar src={el.from.image} className={classes.displayPicture} />\r\n                                        {!el.files.length ? (\r\n                                            <div className={classes.myMessageText}>\r\n                                                {el.message}\r\n                                                <br />\r\n                                                <VCERNTypography variant=\"caption\" value={getDateTime(el.timestamp)} customColor=\"#657285\" />\r\n                                            </div>\r\n                                        ) : (\r\n                                            <FileMessage className={classes.myMessageText} message={el}>\r\n                                                <VCERNTypography variant=\"caption\" value={getDateTime(el.timestamp)} customColor=\"#657285\" />\r\n                                            </FileMessage>\r\n                                        )}\r\n                                    </div>\r\n                                ) : (\r\n                                    <div className={classes.otherMessageBox}>\r\n                                        <VCERNAvatar src={el.from.image} className={classes.otherDisplayPicture} />\r\n                                        {!el.files.length ? (\r\n                                            <div className={classes.otherMessageText}>\r\n                                                {el.message}\r\n                                                <br />\r\n                                                <VCERNTypography variant=\"caption\" value={getDateTime(el.timestamp)} />\r\n                                            </div>\r\n                                        ) : (\r\n                                            <FileMessage className={classes.otherMessageText} message={el}>\r\n                                                <VCERNTypography variant=\"caption\" value={getDateTime(el.timestamp)} />\r\n                                            </FileMessage>\r\n                                        )}\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className={classes.newMessageBox}>\r\n                        <input className={classes.sendInput} placeholder=\"Type your message here.......\" value={message} name=\"message\" onChange={handleOnChange} />\r\n                        <label htmlFor=\"upload-photo\" className={classes.attachIcon}>\r\n                            <Attach />\r\n                        </label>\r\n                        <input id=\"upload-photo\" type=\"file\" style={{ display: 'none' }} onChange={handleAttachment} multiple />\r\n                        <div onClick={() => handleSend(message)} className={classes.send}>\r\n                            <Send />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\nexport default connect(state => state, { getPreSignedLink: AC.getPreSignedLink, uploadFile: AC.uploadFile })(Messages);\r\n","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\SelectPool.js",["336","337"],"import { makeStyles } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport logo from '../common/assets/logos/blue.png';\r\nimport VCERNButton from '../common/elements/VCERNButton';\r\nimport VCERNTypography from '../common/elements/VCERNTypography';\r\n\r\nimport poolImage from '../common/assets/others/pool.png';\r\nimport { AddIcon } from '../common/icons';\r\nimport { connect } from 'react-redux';\r\n\r\nimport AC from '../redux/actions/actionCreater';\r\nimport cx from 'clsx';\r\nimport constants from '../common/constants';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    logoBox: { textAlign: 'center' },\r\n\r\n    root: { marginTop: 50 },\r\n    logo: { height: 100, width: 100 },\r\n\r\n    poolBox: { display: 'flex', flexWrap: 'wrap', justifyContent: 'center' },\r\n    poolImage: { height: 175, width: 175 },\r\n    newPoolCard: { display: 'flex', justifyContent: 'center', alignItems: 'center', height: 175, width: 175, background: '#07A7E3', color: 'white' },\r\n    poolCard: { margin: 25, cursor: 'pointer' },\r\n    activePool: { outline: '5px solid #07A7E3', outlineOffset: '-5px' },\r\n    button: { marginTop: 50, [theme.breakpoints.down('sm')]: { marginTop: 10 } },\r\n}));\r\n\r\nfunction SelectPool({ setSelectedPool, selectedPool, fetchPools, currentUser, type, token }) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [pool, setPool] = useState(0);\r\n    const [pools, setPools] = useState([]);\r\n\r\n    const { organization, _id, verified } = currentUser;\r\n\r\n    useEffect(() => {\r\n        // if (!verified) return history.push('/verify');\r\n        fetchPools({ organization, _id }, type, token, setPools);\r\n    }, []);\r\n\r\n    const handleSubmit = () => {\r\n        setSelectedPool(pools[pool]);\r\n        history.push('/dashboard');\r\n    };\r\n\r\n    const handleNewPool = () => {\r\n        setPool(null);\r\n        history.push(type === constants.USER_TYPE_MEMBER ? 'all-pools' : '/new-pool');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.logoBox}>\r\n                <img src={logo} alt=\"logo\" className={classes.logo} />\r\n            </div>\r\n            <div className={classes.root}>\r\n                <VCERNTypography align=\"center\" variant=\"h3\" className={classes.logoText} value=\"Select Pool\" />\r\n                <div className={classes.poolBox}>\r\n                    {pools.map((el, idx) => (\r\n                        <div key={idx} className={cx(classes.poolCard)} onClick={() => setPool(idx)}>\r\n                            <img src={poolImage} alt=\"logo\" className={cx(classes.poolImage, { [classes.activePool]: idx === pool })} />\r\n                            <VCERNTypography align=\"center\" variant=\"h6\" className={classes.logoText} value={el?.name} />\r\n                        </div>\r\n                    ))}\r\n                    <div className={classes.poolCard} onClick={handleNewPool}>\r\n                        <div className={classes.newPoolCard}>\r\n                            <AddIcon fontSize=\"large\" />\r\n                        </div>\r\n                        <VCERNTypography\r\n                            align=\"center\"\r\n                            variant=\"h6\"\r\n                            className={classes.logoText}\r\n                            value={type === constants.USER_TYPE_MEMBER ? 'Join New Pool' : 'Request New Pool'}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <VCERNButton fullWidth value=\"Next\" className={classes.button} onClick={handleSubmit} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default connect(state => state, { setSelectedPool: AC.setSelectedPool, fetchPools: AC.fetchPools })(SelectPool);\r\n","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\organization\\NewPool.js",["338","339"],"import { Checkbox, Grid, makeStyles, Paper } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nimport VCERNButton from '../../common/elements/VCERNButton';\r\nimport VCERNTypography from '../../common/elements/VCERNTypography';\r\n\r\nimport { connect } from 'react-redux';\r\nimport VCERNTextField from '../../common/elements/VCERNTextField';\r\nimport VCERNAutocomplete from '../../common/elements/VCERNAutocomplete';\r\n\r\nimport { contributionFequencyList } from '../../common/data';\r\nimport icons from '../../common/icons';\r\nimport AC from '../../redux/actions/actionCreater';\r\n\r\nimport VCERNAlert from '../../common/elements/VCERNAlert';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    input: { margin: '15px 0' },\r\n    title: { marginTop: 10, fontWeight: 'bold' },\r\n    remberMeContainer: { display: 'flex', alignItems: 'center', width: '100%' },\r\n}));\r\n\r\nfunction NewPool({ currentUser, requestNewPool, token }) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const [successMessage, setSuccessMessage] = useState(false);\r\n    const [data, setData] = useState({\r\n        name: '',\r\n        description: '',\r\n        start_date: '',\r\n        end_date: '',\r\n        time_limit: true,\r\n        contribution: '',\r\n        recurring_frequency: '',\r\n        single_event: false,\r\n    });\r\n    const { name, description, start_date, end_date, time_limit, contribution, recurring_frequency, single_event } = data;\r\n\r\n    const handleOnChange = evt => {\r\n        const { value, name } = evt.target;\r\n        setData({ ...data, [name]: value });\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        requestNewPool(data, token, () => {\r\n            setSuccessMessage('New Pool Request Sent Successfully');\r\n            setTimeout(() => {\r\n                history.push('/dashboard');\r\n            }, 3000);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <VCERNTypography variant=\"body1\" value=\"Pool Name *\" className={classes.title} />\r\n            <VCERNTextField variant=\"outlined\" placeholder=\"Name\" className={classes.input} value={name} name=\"name\" onChange={handleOnChange} />\r\n            <VCERNTypography variant=\"body1\" value=\"Description Pool Purpose *\" className={classes.title} />\r\n            <VCERNTextField\r\n                variant=\"outlined\"\r\n                multiline\r\n                rows={5}\r\n                placeholder=\"Short Description goes here...  e.g.  Assist members for every new born.\"\r\n                value={description}\r\n                name=\"description\"\r\n                onChange={handleOnChange}\r\n                className={classes.input}\r\n            />\r\n            <VCERNTypography variant=\"body1\" value=\"Start Date *\" className={classes.title} />\r\n            <VCERNTextField limit type=\"date\" variant=\"outlined\" className={classes.input} value={start_date} name=\"start_date\" onChange={handleOnChange} />\r\n\r\n            <VCERNTypography variant=\"body1\" value=\"End Date *\" className={classes.title} />\r\n            <div className={classes.remberMeContainer}>\r\n                <Checkbox color=\"secondary\" value={!time_limit} checked={!time_limit} onChange={evt => setData({ ...data, time_limit: !evt.target.checked })} />\r\n                <VCERNTypography variant=\"body1\" value=\"No time limit\" />\r\n            </div>\r\n            <VCERNTextField limit disabled={!time_limit} type=\"date\" variant=\"outlined\" className={classes.input} value={end_date} name=\"end_date\" onChange={handleOnChange} />\r\n\r\n            <VCERNTypography variant=\"body1\" value=\"Contribution *\" className={classes.title} />\r\n            <VCERNTextField variant=\"outlined\" placeholder=\"$20\" className={classes.input} value={contribution} name=\"contribution\" onChange={handleOnChange} />\r\n\r\n            <VCERNTypography variant=\"body1\" value=\"Contribution recurring_frequency *\" className={classes.title} />\r\n            <div className={classes.remberMeContainer}>\r\n                <Checkbox color=\"secondary\" value={single_event} checked={single_event} onChange={evt => setData({ ...data, single_event: evt.target.checked })} />\r\n                <VCERNTypography variant=\"body1\" value=\"Single Event\" />\r\n            </div>\r\n\r\n            {/* <VCERNTypography variant=\"body1\" value=\"Recurring Event\" className={classes.title} /> */}\r\n            <VCERNAutocomplete\r\n                disabled={single_event}\r\n                variant=\"outlined\"\r\n                value={recurring_frequency}\r\n                placeholder=\"How  often...\"\r\n                options={contributionFequencyList}\r\n                className={classes.input}\r\n                onChange={(evt, val) => setData({ ...data, recurring_frequency: val })}\r\n            />\r\n            <VCERNButton fullWidth startIcon={icons.submit} value=\"Submit Request\" onClick={handleSubmit} />\r\n            <VCERNAlert message={successMessage} onClose={() => setSuccessMessage(false)} success={true} />\r\n        </Grid>\r\n    );\r\n}\r\nexport default connect(state => state, { requestNewPool: AC.requestNewPool })(NewPool);\r\n","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\socketNotifications.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\socketChat.js",[],["340","341"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\organization\\ManageGroups.js",["342","343","344","345","346","347","348"],"import { Grid, makeStyles } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nimport VCERNButton from '../../common/elements/VCERNButton';\r\n\r\nimport VCERNLineChart from '../../common/elements/VCERNLineChart';\r\nimport VCERNPieChart from '../../common/elements/VCERNPieChart';\r\nimport VCERNTypography from '../../common/elements/VCERNTypography';\r\n\r\nimport giftPic from '../../common/assets/others/gift.png';\r\n\r\nimport VCERNGroupAvatar from '../../common/elements/VCERNGroupAvatar';\r\n\r\nimport cx from 'clsx';\r\nimport { connect } from 'react-redux';\r\nimport icons from '../../common/icons';\r\nimport VCERNTextField from '../../common/elements/VCERNTextField';\r\nimport { useState } from 'react';\r\nimport AC from '../../redux/actions/actionCreater';\r\nimport VCERNAlert from '../../common/elements/VCERNAlert';\r\nimport DashboardHeader from '../../common/DashboardHeader';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    input: { margin: '5px 0' },\r\n    title: { margin: '15px 0', fontWeight: 'bold' },\r\n    button: { margin: '20px 0' },\r\n}));\r\n\r\nfunction ManageGroups({ triggerEvent, triggerNotification, token, selectedPool }) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const [data, setData] = useState({ description: '', member_id: '', place_death: '', cause_death: '' });\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n\r\n    const { description, member_id, place_death, cause_death } = data;\r\n\r\n    const handleOnChange = evt => {\r\n        const { value, name } = evt.target;\r\n        setData({ ...data, [name]: value });\r\n    };\r\n\r\n    const handleTriggerNotification = () => {\r\n        triggerNotification({ title: 'Announcement', description }, token, () => {\r\n            setSuccessMessage('Notification Sent Successfully.');\r\n            setData({ ...data, description: '' });\r\n        });\r\n    };\r\n\r\n    const handleTriggerEvent = () => {\r\n        triggerEvent({ member_id, pool_id: selectedPool?._id, title: cause_death, description: place_death }, token, () => {\r\n            setSuccessMessage('Notification Sent Successfully.');\r\n            setData({ ...data, member_id: '', place_death: '', cause_death: '' });\r\n        });\r\n    };\r\n\r\n    const disableEventTriggerButton = !place_death || !cause_death || !member_id;\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <DashboardHeader />\r\n            <Grid item xs={12}>\r\n                <VCERNTypography className={classes.title} variant=\"h5\" value=\"Trigger Death Announcement & Contribution Collection \" />\r\n                <VCERNTextField variant=\"outlined\" className={classes.input} placeholder=\"Membership ID\" value={member_id} name=\"member_id\" onChange={handleOnChange} />\r\n                <VCERNTextField variant=\"outlined\" className={classes.input} placeholder=\"Place of Death \" value={place_death} name=\"place_death\" onChange={handleOnChange} />\r\n                <VCERNTextField variant=\"outlined\" className={classes.input} placeholder=\"Cause of Death \" value={cause_death} name=\"cause_death\" onChange={handleOnChange} />\r\n                <VCERNButton fullWidth startIcon={icons.trigger} value=\"Trigger\" disabled={disableEventTriggerButton} className={classes.button} onClick={handleTriggerEvent} />\r\n\r\n                <VCERNTypography className={classes.title} variant=\"h5\" value=\"Notification\" />\r\n                <VCERNTextField\r\n                    rows={5}\r\n                    multiline\r\n                    variant=\"outlined\"\r\n                    className={classes.input}\r\n                    placeholder=\"Blast notification to all members...\"\r\n                    value={description}\r\n                    name=\"description\"\r\n                    onChange={handleOnChange}\r\n                />\r\n                <VCERNButton fullWidth startIcon={icons.trigger} value=\"Trigger Notify\" disabled={!description} className={classes.button} onClick={handleTriggerNotification} />\r\n            </Grid>\r\n\r\n            <VCERNAlert message={successMessage} onClose={() => setSuccessMessage(false)} success={true} />\r\n        </Grid>\r\n    );\r\n}\r\nexport default connect(state => state, { triggerNotification: AC.triggerNotification, triggerEvent: AC.triggerEvent })(ManageGroups);\r\n",["349","350"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\vcern\\Dashboard.js",["351","352","353","354"],"import { Divider, Grid, LinearProgress, makeStyles, Paper } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nimport VCERNButton from '../../common/elements/VCERNButton';\r\n\r\nimport VCERNLineChart from '../../common/elements/VCERNLineChart';\r\nimport VCERNPieChart from '../../common/elements/VCERNPieChart';\r\nimport VCERNTypography from '../../common/elements/VCERNTypography';\r\n\r\nimport giftPic from '../../common/assets/others/gift.png';\r\nimport waitingPic from '../../common/assets/others/dashboard-waiting.jpg';\r\nimport contributePic from '../../common/assets/others/contribute.png';\r\nimport payoutPic from '../../common/assets/others/payout.png';\r\nimport { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport AC from '../../redux/actions/actionCreater';\r\n\r\nconst minHeight = 300;\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: { padding: theme.spacing(2), display: 'flex', overflow: 'auto', minHeight: minHeight, maxHeight: '100%' },\r\n    waitingPic: { height: 400, maxWidth: '98%', [theme.breakpoints.down('sm')]: { height: 280 } },\r\n\r\n    innerBox: { padding: '40px 50px', [theme.breakpoints.down('sm')]: { padding: 0 } },\r\n    text: { margin: '30px 0', color: 'white' },\r\n    infoText: { cursor: 'pointer', textDecoration: 'underline' },\r\n\r\n    hideOnSm: { [theme.breakpoints.down('sm')]: { display: 'none' } },\r\n\r\n    contributeBox: { display: 'flex', justifyContent: 'center', alignitems: 'center', borderBottom: '1px solid #BFC2D6', width: '100%', paddingBottom: 20 },\r\n    icon: { height: 50, width: 50, marginRight: 20 },\r\n\r\n    inviteBox: { padding: theme.spacing(2), display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', minHeight: minHeight, maxHeight: '100%' },\r\n    invitePic: { height: 90, width: 90 },\r\n    inviteText: { fontWeight: 'bold', marginTop: 10, textAlign: 'center' },\r\n\r\n    continueButton: { margin: '10px 0' },\r\n}));\r\n\r\nfunction Dashboard({}) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {}, []);\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n                <Paper className={classes.paper} style={{ background: '#0191DA' }}>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12} md={6} lg={4} className={classes.hideOnSm}>\r\n                            <Paper className={classes.paper}>\r\n                                <img src={waitingPic} alt=\"waiting\" className={classes.waitingPic} />\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6} lg={8}>\r\n                            {/* <VCERNTypography className={classes.infoText} variant=\"body1\" color=\"secondary\" align=\"right\" value=\"What is this?\" /> */}\r\n                            <div className={classes.innerBox}>\r\n                                <VCERNTypography className={classes.text} variant=\"h4\" align=\"center\" value=\"Hey! You’re in the waiting pool now!\" />\r\n                                <VCERNTypography className={classes.text} variant=\"h5\" align=\"center\">\r\n                                    Profile status:\r\n                                    <VCERNTypography color=\"secondary\" value=\" Pending\" />\r\n                                </VCERNTypography>\r\n                                <VCERNTypography className={classes.text} variant=\"h5\" align=\"center\" value=\"23 days remaining to unlock!\" />\r\n                                <LinearProgress variant=\"determinate\" color=\"secondary\" value={70} />\r\n                                <VCERNTypography className={classes.text} variant=\"body2\" align=\"center\">\r\n                                    <VCERNTypography color=\"secondary\" value=\"67 of \" />\r\n                                    90 days completed\r\n                                </VCERNTypography>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n                <iframe title=\"video\" width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/tgbNymZ7vqY\" />\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n                <Paper className={classes.paper}>\r\n                    {/* asdasdfasdfasd fasdf asdf asdf asdf asdf */}\r\n                    {/* <VCERNLineChart /> */}\r\n                    <VCERNPieChart />\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n                <Paper className={classes.inviteBox}>\r\n                    <div className={classes.contributeBox}>\r\n                        <img src={contributePic} alt=\"contribute\" className={classes.icon} />\r\n                        <div>\r\n                            <VCERNTypography variant=\"body1\" className={classes.inviteText} value=\"Contribution: $20\" />\r\n                            <VCERNTypography variant=\"body2\" className={classes.inviteText} value=\"I’ll donate each time\" customColor=\"#6F7F9F\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.contributeBox} style={{ borderBottom: 0, marginTop: 20 }}>\r\n                        <img src={payoutPic} alt=\"contribute\" className={classes.icon} />\r\n                        <div>\r\n                            <VCERNTypography variant=\"body1\" className={classes.inviteText} value=\"Payout: $20,000\" />\r\n                            <VCERNTypography variant=\"body2\" className={classes.inviteText} value=\"I’ll receive\" customColor=\"#6F7F9F\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <VCERNButton fullWidth value=\"Continue\" className={classes.continueButton} />\r\n                    <Divider />\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n                <Paper className={classes.inviteBox}>\r\n                    <img src={giftPic} alt=\"invite\" className={classes.invitePic} />\r\n                    <VCERNTypography className={classes.inviteText} variant=\"h5\" value=\"Get $10\" />\r\n                    <VCERNTypography className={classes.inviteText} variant=\"body2\" value=\"You’ll both get $10 in free When your friend Join in the pool\" customColor=\"#6F7F9F\" />\r\n                    <VCERNTypography className={classes.inviteText} variant=\"body1\" value=\"Help your pool grow faster by inviting family and friends!\" />\r\n                    <VCERNButton fullWidth value=\"Continue\" className={classes.continueButton} />\r\n                </Paper>\r\n            </Grid>\r\n            <VCERNTypography variant=\"h5\" className={classes.inviteText} value=\"About us\" />\r\n            <Grid container spacing={3} style={{ margin: '20px 0' }}>\r\n                <Grid item xs={12} md={4}>\r\n                    <img src={waitingPic} alt=\"waiting\" height={375} width=\"auto\" />\r\n                </Grid>\r\n                <Grid item xs={12} md={8}>\r\n                    <VCERNTypography\r\n                        variant=\"body1\"\r\n                        customColor=\"#6F7F9F\"\r\n                        value=\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\"\r\n                    />\r\n                    <VCERNTypography variant=\"body1\" className={classes.inviteText} value=\"Read More\" />\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default connect(state => state, {})(Dashboard);\r\n",["355","356"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\AllPools.js",["357","358","359"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\PaymentModal.js",["360"],"import { Checkbox, Divider, makeStyles, Radio } from '@material-ui/core';\r\nimport { CardElement, useElements, useStripe } from '@stripe/react-stripe-js';\r\nimport React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport AC from '../redux/actions/actionCreater';\r\nimport VCERNModal from './elements/VCERNModal';\r\nimport VCERNTypography from './elements/VCERNTypography';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    boldText: { fontWeight: 'bold' },\r\n\r\n    divider: { margin: '15px 0' },\r\n    inline: { display: 'flex', justifyContent: 'space-between', alignItems: 'center' },\r\n    cardBox: { display: 'flex', alignItems: 'center' },\r\n\r\n    membershipText: { padding: 10, fontWeight: 'bold', boxShadow: '0 0 5px #888888', borderRadius: 5 },\r\n    remberMeContainer: { display: 'flex', alignItems: 'center', width: '100%' },\r\n    underline: { fontWeight: 'bold', margin: '20px 0', textDecoration: 'underline', cursor: 'pointer' },\r\n    card: { borderBottom: '2px solid #07A7E3', paddingBottom: 5, margin: '20px 10px' },\r\n}));\r\nfunction PaymentModal({ title, open, onClose, onConfirm, setError }) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n\r\n    const [selectedCard, setSelectedCard] = useState(0);\r\n    const [agreedTerms, setAgreedTerms] = useState(false);\r\n\r\n    const handleSubmit = async evt => {\r\n        if (!(selectedCard === 999)) return onConfirm();\r\n        if (!agreedTerms) return setError('Please accept Terms & Conditions to proceed');\r\n        evt.preventDefault();\r\n        if (!stripe || !elements) return;\r\n\r\n        const cardElement = elements.getElement(CardElement);\r\n        const { error, paymentMethod } = await stripe.createPaymentMethod({ type: 'card', card: cardElement });\r\n\r\n        if (error) {\r\n            console.log('[error]', error);\r\n            setError(error.message);\r\n        } else {\r\n            // register({ ...data, payment_method: paymentMethod.id }, type, () => history.push('/verify'));\r\n            onConfirm();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <VCERNModal title=\"Payment\" open={open} onClose={onClose} onConfirm={handleSubmit} buttonTittle={title}>\r\n            <div className={classes.inline}>\r\n                <VCERNTypography value=\"Yearly Membership\" className={classes.boldText} customColor=\"#657285\" />\r\n                <VCERNTypography value=\"Yearly Membership\" className={classes.membershipText} />\r\n            </div>\r\n            <Divider variant=\"fullWidth\" className={classes.divider} />\r\n            <VCERNTypography value=\"Summary\" variant=\"h6\" className={classes.boldText} />\r\n            <VCERNTypography value=\"Once a year, you will be charged $19.99  membership fee by vCERN.\" variant=\"body2\" className={classes.boldText} />\r\n            <VCERNTypography variant=\"body2\" className={classes.boldText}>\r\n                Additionally,\r\n                <VCERNTypography variant=\"body2\" color=\"primary\" component=\"span\" value={' userSubscriptionPrice '} />\r\n                will charge you\r\n                <VCERNTypography variant=\"body2\" color=\"primary\" component=\"span\" value={' userSubscriptionPrice '} />\r\n                for your contribution every time someone passes away.\r\n            </VCERNTypography>\r\n            <VCERNTypography value=\" Your beneficiary will collect $20,000 in the event of your passing.\" variant=\"body1\" className={classes.boldText} />\r\n            <Divider variant=\"fullWidth\" className={classes.divider} />\r\n            <VCERNTypography value=\"Select card\" variant=\"h6\" className={classes.boldText} />\r\n            {[1, 1].map((el, idx) => (\r\n                <div key={idx} className={classes.cardBox}>\r\n                    <Radio checked={idx === selectedCard} onChange={() => setSelectedCard(idx)} />\r\n                    <VCERNTypography variant=\"body2\" value=\"**** **** **** 0000\" className={classes.boldText} customColor=\"#657285\" />\r\n                </div>\r\n            ))}\r\n            <div className={classes.cardBox}>\r\n                <Radio checked={selectedCard === 999} onChange={() => setSelectedCard(999)} />\r\n                <VCERNTypography variant=\"body2\" value=\"Add New Card\" className={classes.boldText} />\r\n            </div>\r\n            {selectedCard === 999 && (\r\n                <div>\r\n                    <CardElement\r\n                        className={classes.card}\r\n                        options={{\r\n                            iconStyle: 'solid',\r\n                            style: {\r\n                                base: {\r\n                                    fontSize: '16px',\r\n                                    fontSmoothing: 'antialiased',\r\n                                },\r\n                                invalid: {\r\n                                    iconColor: 'red',\r\n                                    color: 'red',\r\n                                },\r\n                            },\r\n                        }}\r\n                    />\r\n                    <div className={classes.remberMeContainer}>\r\n                        <Checkbox color=\"secondary\" value={agreedTerms} checked={agreedTerms} onChange={evt => setAgreedTerms(evt.target.checked)} />\r\n                        <VCERNTypography variant=\"body1\" className={classes.boldText}>\r\n                            I agree with All{' '}\r\n                            <VCERNTypography\r\n                                variant=\"body1\"\r\n                                color=\"secondary\"\r\n                                component=\"span\"\r\n                                className={classes.underline}\r\n                                value=\"Terms & Conditions\"\r\n                                onClick={() => history.push('/terms-and-conditions')}\r\n                            />{' '}\r\n                            and{' '}\r\n                            <VCERNTypography\r\n                                variant=\"body1\"\r\n                                component=\"span\"\r\n                                color=\"secondary\"\r\n                                className={classes.underline}\r\n                                value=\"Payment agreements\"\r\n                                onClick={() => history.push('/payment-agreements')}\r\n                            />\r\n                        </VCERNTypography>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </VCERNModal>\r\n    );\r\n}\r\nexport default connect(state => state, { setError: AC.setError })(PaymentModal);\r\n","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\DashboardHeader.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\organization\\Settings.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNImageUpload.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\organization\\ManageMembers.js",["361","362","363"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\vcern\\ManageOrganizations.js",["364","365"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNConfirmationModal.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\vcern\\ManageAdmins.js",["366","367"],"import React from 'react';\r\nimport VCERNTypography from '../../common/elements/VCERNTypography';\r\nimport VCERNTextField from '../../common/elements/VCERNTextField';\r\nimport { Divider, Grid, makeStyles } from '@material-ui/core';\r\nimport { useState } from 'react';\r\nimport icons from '../../common/icons';\r\nimport VCERNButton from '../../common/elements/VCERNButton';\r\n\r\nimport VCERNAvatar from '../../common/elements/VCERNAvatar';\r\nimport VCERNConfirmationModal from '../../common/elements/VCERNConfirmationModal';\r\nimport { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport VCERNModal from '../../common/elements/VCERNModal';\r\nimport VCERNDropdown from '../../common/elements/VCERNDropdown';\r\nimport { vcernAdminRoles } from '../../common/data';\r\nimport AC from '../../redux/actions/actionCreater';\r\n\r\nimport InputMask from 'react-input-mask';\r\nimport constants from '../../common/constants';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    input: { margin: '5px 0' },\r\n    boldText: { fontWeight: 'bold' },\r\n\r\n    // listBox: { maxHeight: 400, overflow: 'scroll', padding: '0 10px' },\r\n    listItem: { display: 'flex', alignItems: 'center', margin: '10px 0' },\r\n    image: { height: 60, width: 60, marginRight: 15 },\r\n    grow: { flexGrow: 1 },\r\n    listHeader: { margin: '10px 0' },\r\n    optionButton: { marginRight: 20, color: '#FE9900' },\r\n    title: { fontWeight: 'bold', margin: '10px 0' },\r\n}));\r\n\r\nfunction ManageAdmins({ fetchAdmins, token, addVcernAdmin, setError, toggleVcernAdminRole, toggleVcernAdminAvailability }) {\r\n    const classes = useStyles();\r\n\r\n    const [showConfirmationModal, setShowConfirmationModal] = useState(false);\r\n    const [showAddAdminModal, setShowAddAdminModal] = useState(false);\r\n    const [showConfirmationText, setShowConfirmationText] = useState('');\r\n    const [selectedAdmin, setSelectedAdmin] = useState(null);\r\n\r\n    const [filteredAdmins, setFilteredAdmins] = useState([]);\r\n    const [admins, setAdmins] = useState([]);\r\n\r\n    const [state, setState] = useState({ search: '', email: '', type: '', first_name: '', last_name: '', phone: '' });\r\n    const { search, email, type, first_name, last_name, phone } = state;\r\n\r\n    useEffect(() => {\r\n        fetchAdmins(token, setAdmins);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setFilteredAdmins(admins.filter(el => el?.first_name.toLowerCase().includes(search.toLowerCase()) || el?.last_name.toLowerCase().includes(search.toLowerCase())));\r\n    }, [search.length]);\r\n\r\n    useEffect(() => {\r\n        setFilteredAdmins(admins);\r\n    }, [admins]);\r\n\r\n    const handleActionClick = (idx, action) => {\r\n        action === 'remove'\r\n            ? setShowConfirmationText('Are you sure you want to remove this Admin?')\r\n            : setShowConfirmationText('Are you sure you want to change the role of this Admin?');\r\n        setSelectedAdmin({ idx, action });\r\n        setShowConfirmationModal(true);\r\n    };\r\n\r\n    const handleOnChange = evt => {\r\n        const { name, value } = evt.target;\r\n        setState({ ...state, [name]: value });\r\n    };\r\n\r\n    const handleAddAdmin = () => {\r\n        if (!constants.EMAIL_REGEX.test(email) || !phone || !first_name || !last_name || !type) return setError('Please enter all fields');\r\n\r\n        addVcernAdmin(state, token, val => {\r\n            setAdmins([...admins.filter(el => el._id !== val._id), val]);\r\n            setShowAddAdminModal(false);\r\n        });\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        selectedAdmin.action === 'remove'\r\n            ? toggleVcernAdminAvailability(selectedAdmin.idx, token, val => {\r\n                  setShowConfirmationModal(false);\r\n                  setAdmins([...admins.filter(el => el._id !== val._id), val]);\r\n              })\r\n            : toggleVcernAdminRole(selectedAdmin.idx, token, val => {\r\n                  setShowConfirmationModal(false);\r\n                  setAdmins([...admins.filter(el => el._id !== val._id), val]);\r\n              });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Grid container spacing={1} className={classes.listHeader}>\r\n                <Grid item xs={12} md={6} lg={4}>\r\n                    <VCERNTextField\r\n                        variant=\"outlined\"\r\n                        icon={icons.search}\r\n                        className={classes.input}\r\n                        placeholder=\"Search Admin\"\r\n                        value={search}\r\n                        name=\"search\"\r\n                        onChange={handleOnChange}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} md={6} lg={8}>\r\n                    <VCERNButton value=\"Add Admin\" startIcon={icons.add} onClick={() => setShowAddAdminModal(true)} align=\"right\" />\r\n                </Grid>\r\n            </Grid>\r\n            <div className={classes.listBox}>\r\n                {filteredAdmins.map((el, idx) => (\r\n                    <>\r\n                        <div className={classes.listItem}>\r\n                            <VCERNAvatar className={classes.image} src={el?.image} />\r\n                            <div className={classes.grow}>\r\n                                <VCERNTypography\r\n                                    className={classes.boldText}\r\n                                    variant=\"body1\"\r\n                                    value={`${el.first_name} ${el.last_name} \r\n                                ${el?.type === 'basic' ? '(Admin)' : '(Super Admin)'}`}\r\n                                />\r\n                                <VCERNTypography className={classes.boldText} variant=\"body2\" value=\"Member Since 21/05/2020\" customColor=\"#6F7F9F\" />\r\n                            </div>\r\n                            <VCERNButton\r\n                                variant=\"outlined\"\r\n                                value={el?.type === 'basic' ? 'Make Super Admin' : 'Make Admin'}\r\n                                color=\"secondary\"\r\n                                size=\"small\"\r\n                                onClick={() => handleActionClick(el?._id, 'toggleRole')}\r\n                                className={classes.optionButton}\r\n                            />\r\n                            <VCERNButton\r\n                                variant=\"outlined\"\r\n                                value={el?.status === 'active' ? 'Disable' : 'Enable'}\r\n                                size=\"small\"\r\n                                onClick={() => handleActionClick(el?._id, 'remove')}\r\n                            />\r\n                        </div>\r\n                        <Divider />\r\n                    </>\r\n                ))}\r\n            </div>\r\n            <VCERNConfirmationModal body={showConfirmationText} open={showConfirmationModal} onClose={() => setShowConfirmationModal(false)} onConfirm={handleSubmit} />\r\n            <VCERNModal title=\"Add Admin\" open={showAddAdminModal} onClose={() => setShowAddAdminModal(false)} onConfirm={handleAddAdmin} buttonTittle=\"Add Admin\">\r\n                {/* <VCERNTypography className={classes.title} variant=\"body1\" value=\"Email\" /> */}\r\n                <VCERNTextField\r\n                    autoFocus\r\n                    variant=\"outlined\"\r\n                    icon={icons.email}\r\n                    className={classes.input}\r\n                    placeholder=\"Email\"\r\n                    value={email}\r\n                    name=\"email\"\r\n                    onChange={handleOnChange}\r\n                />\r\n                <VCERNTextField\r\n                    placeholder=\"First Name\"\r\n                    variant=\"outlined\"\r\n                    icon={icons.person}\r\n                    className={classes.input}\r\n                    value={first_name}\r\n                    name=\"first_name\"\r\n                    onChange={handleOnChange}\r\n                />\r\n                <VCERNTextField\r\n                    variant=\"outlined\"\r\n                    icon={icons.person}\r\n                    className={classes.input}\r\n                    placeholder=\"Last Name\"\r\n                    value={last_name}\r\n                    name=\"last_name\"\r\n                    onChange={handleOnChange}\r\n                />\r\n                <InputMask\r\n                    maskChar=\" \"\r\n                    value={phone}\r\n                    mask=\"(+1) 999 999 99 99\"\r\n                    className={classes.input}\r\n                    name=\"testasdf\"\r\n                    onChange={evt => setState({ ...state, phone: evt.target.value })}\r\n                >\r\n                    {() => <VCERNTextField variant=\"outlined\" name=\"test\" icon={icons.phone} />}\r\n                </InputMask>\r\n\r\n                <VCERNTypography className={classes.title} variant=\"body1\" value=\"Type\" />\r\n                <VCERNDropdown value={type} name=\"type\" onChange={handleOnChange} options={vcernAdminRoles} />\r\n            </VCERNModal>\r\n        </div>\r\n    );\r\n}\r\nexport default connect(state => state, {\r\n    fetchAdmins: AC.fetchAdmins,\r\n    addVcernAdmin: AC.addVcernAdmin,\r\n    setError: AC.setError,\r\n    toggleVcernAdminRole: AC.toggleVcernAdminRole,\r\n    toggleVcernAdminAvailability: AC.toggleVcernAdminAvailability,\r\n})(ManageAdmins);\r\n","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\elements\\VCERNDropdown.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\Blogs.js",["368","369"],"import { Grid, makeStyles } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport constants from '../common/constants';\r\nimport VCERNButton from '../common/elements/VCERNButton';\r\nimport VCERNTextField from '../common/elements/VCERNTextField';\r\nimport BlogCard from '../common/BlogCard';\r\nimport icons from '../common/icons';\r\nimport AC from '../redux/actions/actionCreater';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    listHeader: { margin: '10px 0' },\r\n}));\r\n\r\nfunction Blogs({ type, fetchBlogs, token }) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const [search, setSearch] = useState('');\r\n    const [blogs, setBlogs] = useState([]);\r\n    const [filteredBlogs, setFilteredBlogs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchBlogs(token, setBlogs);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setFilteredBlogs(blogs.filter(el => el?.title.toLowerCase().includes(search.toLowerCase())));\r\n    }, [search.length]);\r\n\r\n    useEffect(() => {\r\n        setFilteredBlogs(blogs);\r\n    }, [blogs]);\r\n\r\n    return (\r\n        <div>\r\n            {type === constants.USER_TYPE_MEMBER ? (\r\n                <VCERNTextField\r\n                    variant=\"outlined\"\r\n                    icon={icons.search}\r\n                    className={classes.input}\r\n                    placeholder=\"Search Blog\"\r\n                    value={search}\r\n                    name=\"search\"\r\n                    onChange={evt => setSearch(evt.target.value)}\r\n                />\r\n            ) : (\r\n                <Grid container spacing={1} className={classes.listHeader}>\r\n                    <Grid item xs={12} md={6} lg={4}>\r\n                        <VCERNTextField\r\n                            variant=\"outlined\"\r\n                            icon={icons.search}\r\n                            className={classes.input}\r\n                            placeholder=\"Search Blog\"\r\n                            value={search}\r\n                            name=\"search\"\r\n                            onChange={evt => setSearch(evt.target.value)}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6} lg={8}>\r\n                        <VCERNButton value=\"Add Admin\" startIcon={icons.add} onClick={() => history.push('/add-blog')} align=\"right\" />\r\n                    </Grid>\r\n                </Grid>\r\n            )}\r\n            <Grid container spacing={3} className={classes.listHeader}>\r\n                {filteredBlogs.map((el, idx) => (\r\n                    <Grid item key={idx} xs={12} md={4} lg={3}>\r\n                        <BlogCard blog={el} />\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(state => state, { fetchBlogs: AC.fetchBlogs })(Blogs);\r\n","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\BlogCard.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\vcern\\AddBlog.js",["370","371","372"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\SingleBlog.js",[],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\user\\Settings.js",["373","374"],"import { Divider, Grid, makeStyles } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nimport VCERNTypography from '../../common/elements/VCERNTypography';\r\n\r\nimport { connect } from 'react-redux';\r\nimport icons from '../../common/icons';\r\nimport DashboardHeader from '../../common/DashboardHeader';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    input: { margin: '5px 0' },\r\n    title: { margin: '15px 0', fontWeight: 'bold' },\r\n    main: { margin: '20px 0', width: '100%' },\r\n    inline: { margin: '15px 0 15px 15px', display: 'flex', alignItems: 'center' },\r\n    icon: { marginRight: 15 },\r\n    optionText: { fontWeight: 'bold', flexGrow: 1 },\r\n    divider: { margin: '20px 0' },\r\n    goIcon: { cursor: 'pointer' },\r\n}));\r\n\r\nfunction Settings({}) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <Grid container>\r\n            <DashboardHeader />\r\n            <div className={classes.main}>\r\n                <VCERNTypography className={classes.title} variant=\"h6\" value=\"Transactions\" />\r\n                <div className={classes.inline}>\r\n                    <div className={classes.icon}>{icons.dollar}</div>\r\n                    <VCERNTypography className={classes.optionText} variant=\"body1\" value=\"Payment History\" />\r\n                    <div className={classes.goIcon} onClick={() => history.push('/payments')}>\r\n                        {icons.arrowRight}\r\n                    </div>\r\n                </div>\r\n                <div className={classes.inline}>\r\n                    <div className={classes.icon}>{icons.zip}</div>\r\n                    <VCERNTypography className={classes.optionText} variant=\"body1\" value=\"Payment Methods\" />\r\n                    <div className={classes.goIcon} onClick={() => history.push('/payments')}>\r\n                        {icons.arrowRight}\r\n                    </div>\r\n                </div>\r\n\r\n                <Divider className={classes.divider} />\r\n\r\n                <VCERNTypography className={classes.title} variant=\"h6\" value=\"General\" />\r\n                <div className={classes.inline}>\r\n                    <div className={classes.icon}>{icons.eye}</div>\r\n                    <VCERNTypography className={classes.optionText} variant=\"body1\" value=\"View Profile\" />\r\n                    <div className={classes.goIcon} onClick={() => history.push('/profile')}>\r\n                        {icons.arrowRight}\r\n                    </div>\r\n                </div>\r\n                <div className={classes.inline}>\r\n                    <div className={classes.icon}>{icons.settings}</div>\r\n                    <VCERNTypography className={classes.optionText} variant=\"body1\" value=\"Edit Profile\" />\r\n                    <div className={classes.goIcon} onClick={() => history.push('/edit-profile')}>\r\n                        {icons.arrowRight}\r\n                    </div>\r\n                </div>\r\n                <div className={classes.inline}>\r\n                    <div className={classes.icon}>{icons.uploadDocs}</div>\r\n                    <VCERNTypography className={classes.optionText} variant=\"body1\" value=\"View/Upload Docs & Pics\" />\r\n                    <div className={classes.goIcon} onClick={() => history.push('/documents')}>\r\n                        {icons.arrowRight}\r\n                    </div>\r\n                </div>\r\n                <div className={classes.inline}>\r\n                    <div className={classes.icon}>{icons.share}</div>\r\n                    <VCERNTypography className={classes.optionText} variant=\"body1\" value=\"Invite Friends\" />\r\n                    <div className={classes.goIcon} onClick={() => history.push('/invite')}>\r\n                        {icons.arrowRight}\r\n                    </div>\r\n                </div>\r\n\r\n                <Divider className={classes.divider} />\r\n\r\n                <VCERNTypography className={classes.title} variant=\"h6\" value=\"F.A.Q ?\" />\r\n                <div className={classes.inline}>\r\n                    <div className={classes.icon}>{icons.blogs}</div>\r\n                    <VCERNTypography className={classes.optionText} variant=\"body1\" value=\"Terms & Conditions\" />\r\n                    <div className={classes.goIcon} onClick={() => history.push('/payment-agreements')}>\r\n                        {icons.arrowRight}\r\n                    </div>\r\n                </div>\r\n                <div className={classes.inline}>\r\n                    <div className={classes.icon}>{icons.blogs}</div>\r\n                    <VCERNTypography className={classes.optionText} variant=\"body1\" value=\"Privacy Policy\" />\r\n                    <div className={classes.goIcon} onClick={() => history.push('/terms-and-conditions')}>\r\n                        {icons.arrowRight}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Grid>\r\n    );\r\n}\r\nexport default connect(state => state, {})(Settings);\r\n","C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\user\\EditProfile.js",["375"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\Profile.js",["376","377","378","379","380","381","382","383"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\pages\\user\\Documents.js",["384","385","386","387","388","389","390","391","392"],"C:\\Users\\RBTG\\Downloads\\work\\vcern\\src\\common\\DocumentsList.js",[],{"ruleId":"393","replacedBy":"394"},{"ruleId":"395","replacedBy":"396"},{"ruleId":"393","replacedBy":"397"},{"ruleId":"395","replacedBy":"398"},{"ruleId":"393","replacedBy":"399"},{"ruleId":"395","replacedBy":"400"},{"ruleId":"393","replacedBy":"401"},{"ruleId":"395","replacedBy":"402"},{"ruleId":"393","replacedBy":"403"},{"ruleId":"395","replacedBy":"404"},{"ruleId":"393","replacedBy":"405"},{"ruleId":"395","replacedBy":"406"},{"ruleId":"407","severity":1,"message":"408","line":12,"column":49,"nodeType":"409","messageId":"410","endLine":12,"endColumn":50,"suggestions":"411"},{"ruleId":"407","severity":1,"message":"412","line":12,"column":66,"nodeType":"409","messageId":"410","endLine":12,"endColumn":67,"suggestions":"413"},{"ruleId":"393","replacedBy":"414"},{"ruleId":"395","replacedBy":"415"},{"ruleId":"393","replacedBy":"416"},{"ruleId":"395","replacedBy":"417"},{"ruleId":"418","severity":1,"message":"419","line":147,"column":9,"nodeType":"420","messageId":"421","endLine":147,"endColumn":22},{"ruleId":"418","severity":1,"message":"422","line":148,"column":9,"nodeType":"420","messageId":"421","endLine":148,"endColumn":21},{"ruleId":"418","severity":1,"message":"423","line":149,"column":9,"nodeType":"420","messageId":"421","endLine":149,"endColumn":17},{"ruleId":"418","severity":1,"message":"424","line":150,"column":9,"nodeType":"420","messageId":"421","endLine":150,"endColumn":17},{"ruleId":null,"fatal":true,"severity":2,"message":"425","line":2,"column":16},{"ruleId":"418","severity":1,"message":"426","line":28,"column":10,"nodeType":"420","messageId":"421","endLine":28,"endColumn":28},{"ruleId":"427","severity":1,"message":"428","line":120,"column":8,"nodeType":"429","endLine":120,"endColumn":10,"suggestions":"430"},{"ruleId":"393","replacedBy":"431"},{"ruleId":"395","replacedBy":"432"},{"ruleId":"418","severity":1,"message":"433","line":2,"column":17,"nodeType":"420","messageId":"421","endLine":2,"endColumn":26},{"ruleId":"418","severity":1,"message":"434","line":13,"column":8,"nodeType":"420","messageId":"421","endLine":13,"endColumn":24},{"ruleId":"435","severity":1,"message":"436","line":38,"column":20,"nodeType":"437","messageId":"438","endLine":38,"endColumn":22},{"ruleId":"418","severity":1,"message":"439","line":40,"column":11,"nodeType":"420","messageId":"421","endLine":40,"endColumn":18},{"ruleId":"393","replacedBy":"440"},{"ruleId":"395","replacedBy":"441"},{"ruleId":"418","severity":1,"message":"439","line":81,"column":11,"nodeType":"420","messageId":"421","endLine":81,"endColumn":18},{"ruleId":"427","severity":1,"message":"442","line":132,"column":8,"nodeType":"429","endLine":132,"endColumn":10,"suggestions":"443"},{"ruleId":"427","severity":1,"message":"444","line":141,"column":8,"nodeType":"429","endLine":141,"endColumn":23,"suggestions":"445"},{"ruleId":"427","severity":1,"message":"446","line":145,"column":8,"nodeType":"429","endLine":145,"endColumn":24,"suggestions":"447"},{"ruleId":"448","severity":1,"message":"449","line":159,"column":22,"nodeType":"450","messageId":"451","endLine":159,"endColumn":24},{"ruleId":"452","severity":1,"message":"453","line":243,"column":40,"nodeType":"454","messageId":"438","endLine":243,"endColumn":42},{"ruleId":"452","severity":1,"message":"453","line":243,"column":90,"nodeType":"454","messageId":"438","endLine":243,"endColumn":92},{"ruleId":"452","severity":1,"message":"453","line":243,"column":140,"nodeType":"454","messageId":"438","endLine":243,"endColumn":142},{"ruleId":"427","severity":1,"message":"442","line":113,"column":8,"nodeType":"429","endLine":113,"endColumn":10,"suggestions":"455"},{"ruleId":"427","severity":1,"message":"444","line":122,"column":8,"nodeType":"429","endLine":122,"endColumn":23,"suggestions":"456"},{"ruleId":"427","severity":1,"message":"446","line":126,"column":8,"nodeType":"429","endLine":126,"endColumn":24,"suggestions":"457"},{"ruleId":"448","severity":1,"message":"449","line":140,"column":22,"nodeType":"450","messageId":"451","endLine":140,"endColumn":24},{"ruleId":"452","severity":1,"message":"453","line":194,"column":40,"nodeType":"454","messageId":"438","endLine":194,"endColumn":42},{"ruleId":"452","severity":1,"message":"453","line":194,"column":91,"nodeType":"454","messageId":"438","endLine":194,"endColumn":93},{"ruleId":"452","severity":1,"message":"453","line":195,"column":39,"nodeType":"454","messageId":"438","endLine":195,"endColumn":41},{"ruleId":"452","severity":1,"message":"453","line":195,"column":93,"nodeType":"454","messageId":"438","endLine":195,"endColumn":95},{"ruleId":"452","severity":1,"message":"453","line":196,"column":39,"nodeType":"454","messageId":"438","endLine":196,"endColumn":41},{"ruleId":"452","severity":1,"message":"453","line":196,"column":92,"nodeType":"454","messageId":"438","endLine":196,"endColumn":94},{"ruleId":"418","severity":1,"message":"458","line":36,"column":32,"nodeType":"420","messageId":"421","endLine":36,"endColumn":40},{"ruleId":"427","severity":1,"message":"459","line":41,"column":8,"nodeType":"429","endLine":41,"endColumn":10,"suggestions":"460"},{"ruleId":"418","severity":1,"message":"461","line":1,"column":38,"nodeType":"420","messageId":"421","endLine":1,"endColumn":43},{"ruleId":"418","severity":1,"message":"433","line":2,"column":17,"nodeType":"420","messageId":"421","endLine":2,"endColumn":26},{"ruleId":"393","replacedBy":"462"},{"ruleId":"395","replacedBy":"463"},{"ruleId":"418","severity":1,"message":"433","line":2,"column":17,"nodeType":"420","messageId":"421","endLine":2,"endColumn":26},{"ruleId":"418","severity":1,"message":"464","line":7,"column":8,"nodeType":"420","messageId":"421","endLine":7,"endColumn":22},{"ruleId":"418","severity":1,"message":"465","line":8,"column":8,"nodeType":"420","messageId":"421","endLine":8,"endColumn":21},{"ruleId":"418","severity":1,"message":"466","line":11,"column":8,"nodeType":"420","messageId":"421","endLine":11,"endColumn":15},{"ruleId":"418","severity":1,"message":"434","line":13,"column":8,"nodeType":"420","messageId":"421","endLine":13,"endColumn":24},{"ruleId":"418","severity":1,"message":"467","line":15,"column":8,"nodeType":"420","messageId":"421","endLine":15,"endColumn":10},{"ruleId":"418","severity":1,"message":"439","line":32,"column":11,"nodeType":"420","messageId":"421","endLine":32,"endColumn":18},{"ruleId":"393","replacedBy":"468"},{"ruleId":"395","replacedBy":"469"},{"ruleId":"418","severity":1,"message":"464","line":7,"column":8,"nodeType":"420","messageId":"421","endLine":7,"endColumn":22},{"ruleId":"418","severity":1,"message":"470","line":17,"column":8,"nodeType":"420","messageId":"421","endLine":17,"endColumn":10},{"ruleId":"435","severity":1,"message":"436","line":40,"column":20,"nodeType":"437","messageId":"438","endLine":40,"endColumn":22},{"ruleId":"418","severity":1,"message":"439","line":42,"column":11,"nodeType":"420","messageId":"421","endLine":42,"endColumn":18},{"ruleId":"393","replacedBy":"471"},{"ruleId":"395","replacedBy":"472"},{"ruleId":"427","severity":1,"message":"473","line":46,"column":8,"nodeType":"429","endLine":46,"endColumn":10,"suggestions":"474"},{"ruleId":"427","severity":1,"message":"475","line":52,"column":8,"nodeType":"429","endLine":52,"endColumn":23,"suggestions":"476"},{"ruleId":"427","severity":1,"message":"477","line":56,"column":8,"nodeType":"429","endLine":56,"endColumn":25,"suggestions":"478"},{"ruleId":"418","severity":1,"message":"479","line":38,"column":24,"nodeType":"420","messageId":"421","endLine":38,"endColumn":37},{"ruleId":"427","severity":1,"message":"480","line":75,"column":8,"nodeType":"429","endLine":75,"endColumn":10,"suggestions":"481"},{"ruleId":"427","severity":1,"message":"482","line":81,"column":8,"nodeType":"429","endLine":81,"endColumn":33,"suggestions":"483"},{"ruleId":"427","severity":1,"message":"484","line":89,"column":8,"nodeType":"429","endLine":89,"endColumn":23,"suggestions":"485"},{"ruleId":"427","severity":1,"message":"486","line":37,"column":8,"nodeType":"429","endLine":37,"endColumn":10,"suggestions":"487"},{"ruleId":"427","severity":1,"message":"488","line":41,"column":8,"nodeType":"429","endLine":41,"endColumn":23,"suggestions":"489"},{"ruleId":"427","severity":1,"message":"490","line":50,"column":8,"nodeType":"429","endLine":50,"endColumn":10,"suggestions":"491"},{"ruleId":"427","severity":1,"message":"492","line":54,"column":8,"nodeType":"429","endLine":54,"endColumn":23,"suggestions":"493"},{"ruleId":"427","severity":1,"message":"494","line":26,"column":8,"nodeType":"429","endLine":26,"endColumn":10,"suggestions":"495"},{"ruleId":"427","severity":1,"message":"496","line":30,"column":8,"nodeType":"429","endLine":30,"endColumn":23,"suggestions":"497"},{"ruleId":"418","severity":1,"message":"498","line":9,"column":8,"nodeType":"420","messageId":"421","endLine":9,"endColumn":19},{"ruleId":"418","severity":1,"message":"499","line":10,"column":8,"nodeType":"420","messageId":"421","endLine":10,"endColumn":19},{"ruleId":"418","severity":1,"message":"433","line":12,"column":10,"nodeType":"420","messageId":"421","endLine":12,"endColumn":19},{"ruleId":"418","severity":1,"message":"433","line":2,"column":17,"nodeType":"420","messageId":"421","endLine":2,"endColumn":26},{"ruleId":"435","severity":1,"message":"436","line":22,"column":19,"nodeType":"437","messageId":"438","endLine":22,"endColumn":21},{"ruleId":"427","severity":1,"message":"500","line":90,"column":8,"nodeType":"429","endLine":90,"endColumn":21,"suggestions":"501"},{"ruleId":"418","severity":1,"message":"502","line":9,"column":8,"nodeType":"420","messageId":"421","endLine":9,"endColumn":17},{"ruleId":"418","severity":1,"message":"503","line":10,"column":8,"nodeType":"420","messageId":"421","endLine":10,"endColumn":18},{"ruleId":"418","severity":1,"message":"504","line":11,"column":8,"nodeType":"420","messageId":"421","endLine":11,"endColumn":22},{"ruleId":"418","severity":1,"message":"505","line":12,"column":8,"nodeType":"420","messageId":"421","endLine":12,"endColumn":25},{"ruleId":"418","severity":1,"message":"470","line":14,"column":8,"nodeType":"420","messageId":"421","endLine":14,"endColumn":10},{"ruleId":"418","severity":1,"message":"499","line":16,"column":8,"nodeType":"420","messageId":"421","endLine":16,"endColumn":19},{"ruleId":"418","severity":1,"message":"506","line":18,"column":8,"nodeType":"420","messageId":"421","endLine":18,"endColumn":17},{"ruleId":"427","severity":1,"message":"507","line":40,"column":8,"nodeType":"429","endLine":40,"endColumn":10,"suggestions":"508"},{"ruleId":"418","severity":1,"message":"509","line":7,"column":8,"nodeType":"420","messageId":"421","endLine":7,"endColumn":13},{"ruleId":"418","severity":1,"message":"510","line":8,"column":8,"nodeType":"420","messageId":"421","endLine":8,"endColumn":23},{"ruleId":"418","severity":1,"message":"502","line":9,"column":8,"nodeType":"420","messageId":"421","endLine":9,"endColumn":17},{"ruleId":"418","severity":1,"message":"503","line":10,"column":8,"nodeType":"420","messageId":"421","endLine":10,"endColumn":18},{"ruleId":"418","severity":1,"message":"504","line":11,"column":8,"nodeType":"420","messageId":"421","endLine":11,"endColumn":22},{"ruleId":"418","severity":1,"message":"505","line":12,"column":8,"nodeType":"420","messageId":"421","endLine":12,"endColumn":25},{"ruleId":"418","severity":1,"message":"511","line":13,"column":8,"nodeType":"420","messageId":"421","endLine":13,"endColumn":17},{"ruleId":"418","severity":1,"message":"512","line":15,"column":10,"nodeType":"420","messageId":"421","endLine":15,"endColumn":26},{"ruleId":"427","severity":1,"message":"513","line":38,"column":8,"nodeType":"429","endLine":38,"endColumn":10,"suggestions":"514"},"no-native-reassign",["515"],"no-negated-in-lhs",["516"],["515"],["516"],["515"],["516"],["515"],["516"],["515"],["516"],["515"],["516"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["517","518"],"Unnecessary escape character: \\/.",["519","520"],["515"],["516"],["515"],["516"],"no-unused-vars","'p2_first_name' is assigned a value but never used.","Identifier","unusedVar","'p2_last_name' is assigned a value but never used.","'p2_phone' is assigned a value but never used.","'p2_email' is assigned a value but never used.","Parsing error: Unexpected token, expected \"{\"\n\n  1 | import { Divider, Grid, LinearProgress, makeStyles, Paper } from '@material-ui/core';\n> 2 | import React,  from 'react';\n    |                ^\n  3 | \n  4 | import VCERNButton from '../../common/elements/VCERNButton';\n  5 |","'handleNotification' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: '_id', 'organization', and 'type'. Either include them or remove the dependency array.","ArrayExpression",["521"],["515"],["516"],"'useEffect' is defined but never used.","'VCERNGroupAvatar' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'history' is assigned a value but never used.",["515"],["516"],"React Hook useEffect has missing dependencies: '_id', 'currentChat?._id', 'organization', and 'type'. Either include them or remove the dependency array.",["522"],"React Hook useEffect has missing dependencies: 'allChats' and 'search'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilteredChats' needs the current value of 'allChats'.",["523"],"React Hook useEffect has a missing dependency: 'filteredChats'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCurrentChat' needs the current value of 'filteredChats'.",["524"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression",["525"],["526"],["527"],"'verified' is assigned a value but never used.","React Hook useEffect has missing dependencies: '_id', 'fetchPools', 'organization', 'token', and 'type'. Either include them or remove the dependency array. If 'fetchPools' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["528"],"'Paper' is defined but never used.",["515"],["516"],"'VCERNLineChart' is defined but never used.","'VCERNPieChart' is defined but never used.","'giftPic' is defined but never used.","'cx' is defined but never used.",["515"],["516"],"'AC' is defined but never used.",["515"],["516"],"React Hook useEffect has missing dependencies: 'fetchInvitations', 'fetchNewPoolRequests', 'isMember', and 'token'. Either include them or remove the dependency array. If 'fetchInvitations' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["529"],"React Hook useEffect has missing dependencies: 'isMember', 'requests', and 'search'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilteredRequests' needs the current value of 'requests'.",["530"],"React Hook useEffect has a missing dependency: 'requests'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilteredRequests' needs the current value of 'requests'.",["531"],"'paymentMethod' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentOrganization?._id', 'fetchMembersNotInPool', 'fetchOrganizationAdmins', 'fetchPoolMembers', 'selectedPool?._id', and 'token'. Either include them or remove the dependency array. If 'fetchOrganizationAdmins' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["532"],"React Hook useEffect has missing dependencies: 'members' and 'searchAllMembers'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilteredMembers' needs the current value of 'members'.",["533"],"React Hook useEffect has missing dependencies: 'poolMembers' and 'search'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilteredPoolMembers' needs the current value of 'poolMembers'.",["534"],"React Hook useEffect has a missing dependency: 'fetchOrganizations'. Either include it or remove the dependency array. If 'fetchOrganizations' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["535"],"React Hook useEffect has missing dependencies: 'organizations' and 'search'. Either include them or remove the dependency array. If 'setFilteredOrganizations' needs the current value of 'organizations', you can also switch to useReducer instead of useState and read 'organizations' in the reducer.",["536"],"React Hook useEffect has missing dependencies: 'fetchAdmins' and 'token'. Either include them or remove the dependency array. If 'fetchAdmins' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["537"],"React Hook useEffect has missing dependencies: 'admins' and 'search'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilteredAdmins' needs the current value of 'admins'.",["538"],"React Hook useEffect has missing dependencies: 'fetchBlogs' and 'token'. Either include them or remove the dependency array. If 'fetchBlogs' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["539"],"React Hook useEffect has missing dependencies: 'blogs' and 'search'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilteredBlogs' needs the current value of 'blogs'.",["540"],"'uploadImage' is defined but never used.","'VCERNAvatar' is defined but never used.","React Hook useEffect has a missing dependency: 'resetData'. Either include it or remove the dependency array.",["541"],"'InputMask' is defined but never used.","'VCERNModal' is defined but never used.","'VCERNTextField' is defined but never used.","'VCERNAutocomplete' is defined but never used.","'docsImage' is defined but never used.","React Hook useEffect has missing dependencies: 'currentUser', 'location.state.member', and 'type'. Either include them or remove the dependency array. If 'setstate' needs the current value of 'currentUser', you can also switch to useReducer instead of useState and read 'currentUser' in the reducer.",["542"],"'icons' is defined but never used.","'DashboardHeader' is defined but never used.","'constants' is defined but never used.","'getFormattedDate' is defined but never used.","React Hook useEffect has missing dependencies: 'currentUser?._id', 'fetchDocs', and 'token'. Either include them or remove the dependency array. If 'fetchDocs' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["543"],"no-global-assign","no-unsafe-negation",{"messageId":"544","fix":"545","desc":"546"},{"messageId":"547","fix":"548","desc":"549"},{"messageId":"544","fix":"550","desc":"546"},{"messageId":"547","fix":"551","desc":"549"},{"desc":"552","fix":"553"},{"desc":"554","fix":"555"},{"desc":"556","fix":"557"},{"desc":"558","fix":"559"},{"desc":"554","fix":"560"},{"desc":"556","fix":"561"},{"desc":"558","fix":"562"},{"desc":"563","fix":"564"},{"desc":"565","fix":"566"},{"desc":"567","fix":"568"},{"desc":"569","fix":"570"},{"desc":"571","fix":"572"},{"desc":"573","fix":"574"},{"desc":"575","fix":"576"},{"desc":"577","fix":"578"},{"desc":"579","fix":"580"},{"desc":"581","fix":"582"},{"desc":"583","fix":"584"},{"desc":"585","fix":"586"},{"desc":"587","fix":"588"},{"desc":"589","fix":"590"},{"desc":"591","fix":"592"},{"desc":"593","fix":"594"},"removeEscape",{"range":"595","text":"596"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"597","text":"598"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"599","text":"596"},{"range":"600","text":"598"},"Update the dependencies array to be: [_id, organization, type]",{"range":"601","text":"602"},"Update the dependencies array to be: [_id, currentChat?._id, organization, type]",{"range":"603","text":"604"},"Update the dependencies array to be: [allChats, search, search.length]",{"range":"605","text":"606"},"Update the dependencies array to be: [currentChatIdx, filteredChats]",{"range":"607","text":"608"},{"range":"609","text":"604"},{"range":"610","text":"606"},{"range":"611","text":"608"},"Update the dependencies array to be: [_id, fetchPools, organization, token, type]",{"range":"612","text":"613"},"Update the dependencies array to be: [fetchInvitations, fetchNewPoolRequests, isMember, token]",{"range":"614","text":"615"},"Update the dependencies array to be: [isMember, requests, search, search.length]",{"range":"616","text":"617"},"Update the dependencies array to be: [requests, requests.length]",{"range":"618","text":"619"},"Update the dependencies array to be: [currentOrganization?._id, fetchMembersNotInPool, fetchOrganizationAdmins, fetchPoolMembers, selectedPool?._id, token]",{"range":"620","text":"621"},"Update the dependencies array to be: [members, searchAllMembers, searchAllMembers.length]",{"range":"622","text":"623"},"Update the dependencies array to be: [poolMembers, search, search.length]",{"range":"624","text":"625"},"Update the dependencies array to be: [fetchOrganizations]",{"range":"626","text":"627"},"Update the dependencies array to be: [organizations, search, search.length]",{"range":"628","text":"629"},"Update the dependencies array to be: [fetchAdmins, token]",{"range":"630","text":"631"},"Update the dependencies array to be: [admins, search, search.length]",{"range":"632","text":"633"},"Update the dependencies array to be: [fetchBlogs, token]",{"range":"634","text":"635"},"Update the dependencies array to be: [blogs, search, search.length]",{"range":"636","text":"637"},"Update the dependencies array to be: [currentUser, resetData]",{"range":"638","text":"639"},"Update the dependencies array to be: [currentUser, location.state.member, type]",{"range":"640","text":"641"},"Update the dependencies array to be: [currentUser?._id, fetchDocs, token]",{"range":"642","text":"643"},[469,470],"",[469,469],"\\",[486,487],[486,486],[4804,4806],"[_id, organization, type]",[6689,6691],"[_id, currentChat?._id, organization, type]",[7014,7029],"[allChats, search, search.length]",[7143,7159],"[currentChatIdx, filteredChats]",[5975,5977],[6300,6315],[6429,6445],[1709,1711],"[_id, fetchPools, organization, token, type]",[1944,1946],"[fetchInvitations, fetchNewPoolRequests, isMember, token]",[2233,2248],"[isMember, requests, search, search.length]",[2324,2341],"[requests, requests.length]",[3034,3036],"[currentOrganization?._id, fetchMembersNotInPool, fetchOrganizationAdmins, fetchPoolMembers, selectedPool?._id, token]",[3291,3316],"[members, searchAllMembers, searchAllMembers.length]",[3617,3632],"[poolMembers, search, search.length]",[1537,1539],"[fetchOrganizations]",[1693,1708],"[organizations, search, search.length]",[2264,2266],"[fetchAdmins, token]",[2474,2489],"[admins, search, search.length]",[930,932],"[fetchBlogs, token]",[1071,1086],"[blogs, search, search.length]",[3286,3299],"[currentUser, resetData]",[1593,1595],"[currentUser, location.state.member, type]",[1645,1647],"[currentUser?._id, fetchDocs, token]"]