[{"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/App.js":"1","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/routes.js":"2","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/redux/store/index.js":"3","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/Landing.js":"4","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/Tickets.js":"5","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/user/Settings.js":"6","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/organization/NewPool.js":"7","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/organization/ManageMembers.js":"8","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/vcern/AddBlog.js":"9","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/PaymentAgreements.js":"10","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/PaymentModal.js":"11","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/BlogCard.js":"12","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNDropdown.js":"13","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/MonthsSlider.js":"14","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/api.js":"15","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/Header.js":"16","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/organization/ManageGroups.js":"17","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/user/Register.js":"18","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNTextField.js":"19","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/index.js":"20","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/redux/actions/actionCreater.js":"21","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/ForgotPassword.js":"22","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/ResetPassword.js":"23","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/Blogs.js":"24","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/Events.js":"25","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/user/EditProfile.js":"26","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/organization/Dashboard.js":"27","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/vcern/ManageOrganizations.js":"28","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNTypography.js":"29","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/socketNotifications.js":"30","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/DashboardHeader.js":"31","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNConfirmationModal.js":"32","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/constants.js":"33","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/socketChat.js":"34","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/Login.js":"35","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/Messages.js":"36","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/Profile.js":"37","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/user/Dashboard.js":"38","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/user/Documents.js":"39","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/organization/Register.js":"40","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/vcern/Dashboard.js":"41","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/helper.js":"42","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNLineChart.js":"43","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNModal.js":"44","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNAutocomplete.js":"45","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNAlert.js":"46","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/Terms.js":"47","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/Verify.js":"48","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/SingleBlog.js":"49","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/AllPools.js":"50","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/organization/Payments.js":"51","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/vcern/ManageAdmins.js":"52","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/vcern/Payments.js":"53","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNButton.js":"54","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/InfoCard.js":"55","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/data/index.js":"56","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNGroupAvatar.js":"57","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/FileMessage.js":"58","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNPieChart.js":"59","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/user/Payments.js":"60","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/icons.js":"61","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/utils/useWindowDims.js":"62","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/loader.js":"63","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/DocumentsList.js":"64","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/SelectPool.js":"65","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/OrganizationsList.js":"66","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/vcern/SingleOrganization.js":"67","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNImageUpload.js":"68","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/organization/Settings.js":"69","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/theme.js":"70","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/utils/copyToClipboard.js":"71"},{"size":1048,"mtime":1630589141457,"results":"72","hashOfConfig":"73"},{"size":7504,"mtime":1631927189590,"results":"74","hashOfConfig":"73"},{"size":482,"mtime":1630589142414,"results":"75","hashOfConfig":"73"},{"size":5317,"mtime":1630589142021,"results":"76","hashOfConfig":"73"},{"size":18063,"mtime":1631927776630,"results":"77","hashOfConfig":"73"},{"size":5149,"mtime":1630589142412,"results":"78","hashOfConfig":"73"},{"size":5176,"mtime":1630589142023,"results":"79","hashOfConfig":"73"},{"size":17866,"mtime":1631983120179,"results":"80","hashOfConfig":"73"},{"size":4879,"mtime":1630589142413,"results":"81","hashOfConfig":"73"},{"size":1949,"mtime":1630589142021,"results":"82","hashOfConfig":"73"},{"size":6469,"mtime":1630589141458,"results":"83","hashOfConfig":"73"},{"size":1470,"mtime":1630589141457,"results":"84","hashOfConfig":"73"},{"size":677,"mtime":1630589142018,"results":"85","hashOfConfig":"73"},{"size":2291,"mtime":1630589141458,"results":"86","hashOfConfig":"73"},{"size":20399,"mtime":1631741809469,"results":"87","hashOfConfig":"73"},{"size":12249,"mtime":1631149206349,"results":"88","hashOfConfig":"73"},{"size":4349,"mtime":1630590929078,"results":"89","hashOfConfig":"73"},{"size":25988,"mtime":1630592072265,"results":"90","hashOfConfig":"73"},{"size":690,"mtime":1630592130927,"results":"91","hashOfConfig":"73"},{"size":229,"mtime":1630589142020,"results":"92","hashOfConfig":"73"},{"size":18389,"mtime":1631927081361,"results":"93","hashOfConfig":"73"},{"size":3481,"mtime":1630589142020,"results":"94","hashOfConfig":"73"},{"size":2535,"mtime":1630589142022,"results":"95","hashOfConfig":"73"},{"size":3018,"mtime":1630589142020,"results":"96","hashOfConfig":"73"},{"size":1778,"mtime":1630589142020,"results":"97","hashOfConfig":"73"},{"size":19804,"mtime":1630589142412,"results":"98","hashOfConfig":"73"},{"size":5781,"mtime":1631742682280,"results":"99","hashOfConfig":"73"},{"size":4230,"mtime":1630589142413,"results":"100","hashOfConfig":"73"},{"size":633,"mtime":1630589142019,"results":"101","hashOfConfig":"73"},{"size":1294,"mtime":1630589142019,"results":"102","hashOfConfig":"73"},{"size":6540,"mtime":1630589141458,"results":"103","hashOfConfig":"73"},{"size":902,"mtime":1630589142018,"results":"104","hashOfConfig":"73"},{"size":722,"mtime":1630589142017,"results":"105","hashOfConfig":"73"},{"size":3043,"mtime":1630589142019,"results":"106","hashOfConfig":"73"},{"size":5082,"mtime":1630589142021,"results":"107","hashOfConfig":"73"},{"size":14205,"mtime":1631927568904,"results":"108","hashOfConfig":"73"},{"size":7598,"mtime":1631928135334,"results":"109","hashOfConfig":"73"},{"size":13727,"mtime":1631784580468,"results":"110","hashOfConfig":"73"},{"size":3855,"mtime":1630589142411,"results":"111","hashOfConfig":"73"},{"size":21512,"mtime":1630589142024,"results":"112","hashOfConfig":"73"},{"size":3396,"mtime":1630589142413,"results":"113","hashOfConfig":"73"},{"size":1297,"mtime":1630589142019,"results":"114","hashOfConfig":"73"},{"size":724,"mtime":1630589142018,"results":"115","hashOfConfig":"73"},{"size":802,"mtime":1630589142018,"results":"116","hashOfConfig":"73"},{"size":1025,"mtime":1630589142018,"results":"117","hashOfConfig":"73"},{"size":534,"mtime":1630589142017,"results":"118","hashOfConfig":"73"},{"size":1928,"mtime":1630589142022,"results":"119","hashOfConfig":"73"},{"size":3608,"mtime":1630589142022,"results":"120","hashOfConfig":"73"},{"size":2319,"mtime":1630589142022,"results":"121","hashOfConfig":"73"},{"size":10704,"mtime":1630589142020,"results":"122","hashOfConfig":"73"},{"size":5615,"mtime":1631987153239,"results":"123","hashOfConfig":"73"},{"size":9120,"mtime":1630589142413,"results":"124","hashOfConfig":"73"},{"size":4044,"mtime":1630589142413,"results":"125","hashOfConfig":"73"},{"size":1491,"mtime":1630589142018,"results":"126","hashOfConfig":"73"},{"size":2544,"mtime":1630589141458,"results":"127","hashOfConfig":"73"},{"size":4673,"mtime":1630589142017,"results":"128","hashOfConfig":"73"},{"size":431,"mtime":1630589142018,"results":"129","hashOfConfig":"73"},{"size":546,"mtime":1630589141458,"results":"130","hashOfConfig":"73"},{"size":1478,"mtime":1631107699122,"results":"131","hashOfConfig":"73"},{"size":11081,"mtime":1631740775507,"results":"132","hashOfConfig":"73"},{"size":5129,"mtime":1630589142019,"results":"133","hashOfConfig":"73"},{"size":706,"mtime":1631106373331,"results":"134","hashOfConfig":"73"},{"size":620,"mtime":1630589142019,"results":"135","hashOfConfig":"73"},{"size":877,"mtime":1630589141458,"results":"136","hashOfConfig":"73"},{"size":3591,"mtime":1630589142022,"results":"137","hashOfConfig":"73"},{"size":2560,"mtime":1630589141458,"results":"138","hashOfConfig":"73"},{"size":4609,"mtime":1630589142414,"results":"139","hashOfConfig":"73"},{"size":1085,"mtime":1630589142018,"results":"140","hashOfConfig":"73"},{"size":5367,"mtime":1630589142024,"results":"141","hashOfConfig":"73"},{"size":313,"mtime":1630589142020,"results":"142","hashOfConfig":"73"},{"size":98,"mtime":1631982634129,"results":"143","hashOfConfig":"73"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},"1isgtgx",{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"146"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"167"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"182"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"162"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"196"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"196"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"230","messages":"231","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"146"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"167"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"167"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"182"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"167"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"146"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/App.js",[],["307","308"],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/routes.js",["309","310"],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/redux/store/index.js",[],["311","312"],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/Landing.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/Tickets.js",["313"],"import { Grid, makeStyles } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\n\nimport VCERNButton from \"../common/elements/VCERNButton\";\nimport VCERNTypography from \"../common/elements/VCERNTypography\";\nimport icons, { Attach, BackArrow, Send, Add } from \"../common/icons\";\n\nimport { connect } from \"react-redux\";\nimport VCERNTextField from \"../common/elements/VCERNTextField\";\nimport VCERNAvatar from \"../common/elements/VCERNAvatar\";\nimport VCERNModal from \"../common/elements/VCERNModal\";\n\nimport cx from \"clsx\";\n\nimport {\n  sendMessage,\n  join,\n  onJoin,\n  onRoomJoin,\n  onChatsUpdate,\n  onMessageRecieved,\n  disconnectSocket,\n  joinRoom,\n  endTicket,\n  onTicketEnded,\n  createTicket,\n  onTicketCreated,\n  onMessageSeen,\n  leaveRoom,\n} from \"../common/socketChat\";\n\nimport { getDateTime, timeDiffFromNow } from \"../common/helper\";\nimport AC from \"../redux/actions/actionCreater\";\nimport FileMessage from \"../common/FileMessage\";\nimport constants from \"../common/constants\";\nimport { getRoles } from \"../common/data\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainBox: { height: \"80vh\" },\n\n  chatListBox: { border: \"1px solid #BFC1D6\", height: \"calc(80vh - 50px)\" },\n  newChatBox: {\n    background: \"#0191DA\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    color: \"white\",\n    height: \"60px\",\n    padding: 20,\n  },\n  boldText: { fontWeight: \"bold\" },\n  input: { height: \"50px\" },\n  newTicketInput: { margin: \"10px 0\" },\n\n  chatLists: { overflowY: \"auto\", height: \"calc(80vh - 110px)\" },\n  chatBox: {\n    background: \"none\",\n    padding: 10,\n    display: \"flex\",\n    alignItems: \"center\",\n    cursor: \"pointer\",\n  },\n  activeChatBox: {\n    background: \"#ECEFF9\",\n    padding: 10,\n    display: \"flex\",\n    alignItems: \"center\",\n    cursor: \"pointer\",\n  },\n  inline: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n  },\n  displayPicture: { marginRight: 15, height: 50, width: 50 },\n  otherDisplayPicture: { marginLeft: 15, height: 50, width: 50 },\n  displayPictureToOpen: {\n    marginRight: 15,\n    height: 50,\n    width: 50,\n    cursor: \"pointer\",\n  },\n  clipedText: {\n    whiteSpace: \"nowrap\",\n    width: 180,\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n  },\n  backIcon: {\n    display: \"none\",\n    [theme.breakpoints.down(\"sm\")]: { display: \"block\" },\n  },\n\n  newChatIcon: { cursor: \"pointer\" },\n\n  conversationBox: { border: \"1px solid #BFC1D6\", height: \"80vh\" },\n  infoBox: {\n    padding: 15,\n    display: \"flex\",\n    alignItems: \"center\",\n    borderBottom: \"1px solid #BFC1D6\",\n    height: 80,\n  },\n  messages: { overflowY: \"auto\", height: \"calc(80vh - 300px)\" },\n\n  ticketInfo: {\n    padding: 15,\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderBottom: \"1px solid #BFC1D6\",\n    height: 160,\n  },\n\n  myMessageBox: {\n    padding: \"10px 20px\",\n    display: \"flex\",\n    alignItems: \"flex-end\",\n  },\n  myMessageText: {\n    background: \"#ECEFF9\",\n    maxWidth: 400,\n    borderRadius: \"15px 15px 15px 0px\",\n    padding: 10,\n  },\n  otherMessageBox: {\n    padding: \"10px 20px\",\n    display: \"flex\",\n    flexDirection: \"row-reverse\",\n    alignItems: \"flex-end\",\n  },\n  otherMessageText: {\n    background: \"#0191DA\",\n    maxWidth: 400,\n    borderRadius: \"15px 15px 0px 15px\",\n    padding: 10,\n    color: \"white\",\n  },\n\n  newMessageBox: {\n    height: 50,\n    border: \"1px solid #BFC1D6\",\n    marginBottom: 10,\n    borderRadius: 25,\n    paddingLeft: 20,\n    display: \"flex\",\n    alignItems: \"center\",\n    margin: \"0 20px\",\n  },\n  attachIcon: {\n    cursor: \"pointer\",\n    margin: \"0 10px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    [theme.breakpoints.down(\"sm\")]: { margin: \"0 5px\" },\n  },\n  send: {\n    background: \"#0191DA\",\n    height: 50,\n    width: 50,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    color: \"white\",\n    borderRadius: 25,\n    cursor: \"pointer\",\n  },\n  sendInput: { border: \"none\", outline: \"none\", flexGrow: 1, minWidth: 40 },\n\n  hideOnSm: { [theme.breakpoints.down(\"sm\")]: { display: \"none\" } },\n  unreadBadge: {\n    height: 10,\n    width: 10,\n    background: \"#FE9900\",\n    borderRadius: 50,\n  },\n}));\n\nfunction Tickets({\n  currentUser,\n  type,\n  getPreSignedLink,\n  uploadFile,\n  setCurrentPageTitle,\n}) {\n  const classes = useStyles();\n\n  const { _id, organization } = currentUser;\n\n  const [showList, setShowList] = useState(true);\n  const [showNewTicketModal, setShowNewTicketModal] = useState(false);\n  const [currentChatIdx, setCurrentChatIdx] = useState(0);\n  const [currentChat, setCurrentChat] = useState([]);\n  const [allChats, setAllChats] = useState([]);\n  const [filteredChats, setFilteredChats] = useState([]);\n  const [state, setState] = useState({\n    message: \"\",\n    search: \"\",\n    subject: \"\",\n    newTicket: \"\",\n  });\n\n  const { message, search, subject, newTicket } = state;\n  useEffect(() => {\n    setCurrentPageTitle(`${getRoles[type]} Tickets`);\n\n    join(\n      type === constants.USER_TYPE_VCERN ? \"vcern_admin\" : type,\n      _id,\n      organization\n    );\n    onJoin(\n      (val) => setAllChats(val),\n      (val) => setFilteredChats(val),\n      (val) => setCurrentChatIdx(val),\n      true\n    );\n    onChatsUpdate((val) => {\n      setAllChats((prevChat) =>\n        prevChat.map((e) =>\n          e._id === val.ticket._id\n            ? {\n                ...e,\n                last_message: val.ticket.last_message,\n                messages: [...e.messages, val.ticket.last_message],\n                seen: val.ticket.seen,\n              }\n            : e\n        )\n      );\n      setFilteredChats((prevChat) =>\n        prevChat.map((e) =>\n          e._id === val.ticket._id\n            ? {\n                ...e,\n                last_message: val.ticket.last_message,\n                messages: [...e.messages, val.ticket.last_message],\n                seen: val.ticket.seen,\n              }\n            : e\n        )\n      );\n    });\n    onRoomJoin();\n    onMessageSeen((val) => {\n      setAllChats((prevChat) =>\n        prevChat.map((e) =>\n          e._id === val.ticket._id ? { ...e, seen: val.ticket.seen } : e\n        )\n      );\n      setFilteredChats((prevChat) =>\n        prevChat.map((e) =>\n          e._id === val.ticket._id ? { ...e, seen: val.ticket.seen } : e\n        )\n      );\n    });\n    joinRoom(currentChat?._id);\n    onMessageRecieved((val) =>\n      setCurrentChat((prevChat) => ({\n        ...prevChat,\n        messages: [...prevChat.messages, val],\n      }))\n    );\n    onTicketEnded((val) => {\n      console.log({\n        val,\n      });\n      setCurrentChat(val);\n      setFilteredChats((prevTickets) =>\n        prevTickets.map((e) =>\n          e._id === val._id ? { ...e, open: false, ...val } : e\n        )\n      );\n      setAllChats((prevTickets) =>\n        prevTickets.map((e) =>\n          e._id === val._id ? { ...e, open: false, ...val } : e\n        )\n      );\n    });\n    onTicketCreated(\n      (val) => setAllChats((prevTickets) => [...prevTickets, val]),\n      (val) => setFilteredChats((prevTickets) => [...prevTickets, val]),\n      (val) => {}\n    );\n    return () => disconnectSocket();\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    const messages = document.getElementById(\"messages\");\n    messages.scrollTop = messages.scrollHeight;\n  }, [currentChat?.messages?.length]);\n\n  useEffect(() => {\n    setFilteredChats(\n      allChats.filter((el) =>\n        el.name.toLowerCase().includes(search.toLowerCase())\n      )\n    );\n\n    // eslint-disable-next-line\n  }, [search.length]);\n\n  useEffect(() => {\n    setCurrentChat(filteredChats.find((el) => el._id === currentChatIdx));\n\n    // eslint-disable-next-line\n  }, [currentChatIdx]);\n\n  const handleOnChange = (evt) => {\n    const { name, value } = evt.target;\n    setState({ ...state, [name]: value });\n  };\n\n  const handleSend = (message, files = []) => {\n    sendMessage(message, files, currentChat?._id, \"ticket\");\n    setState({ ...state, message: \"\" });\n  };\n\n  const handleAttachment = (evt) => {\n    const files = [...evt.target.files];\n    files.map((el) => {\n      const { name, type } = el;\n      return getPreSignedLink({ name, type }, (url) =>\n        uploadFile({ url, file: el, type }, () =>\n          handleSend(\"File Attached\", [\n            { url: url.split(\"?\")[0], fileType: type },\n          ])\n        )\n      );\n    });\n  };\n\n  const handleToggleChat = (idx) => {\n    setShowList(false);\n    leaveRoom(currentChatIdx);\n    joinRoom(idx);\n    setCurrentChatIdx(idx);\n  };\n\n  const handleCloseTicket = () => {\n    endTicket(currentChat._id);\n  };\n\n  const handleCreateNewTicket = () => {\n    setShowNewTicketModal(false);\n    createTicket(subject, organization, newTicket);\n    setState({ ...state, newTicket: \"\", subject: \"\" });\n  };\n\n  return (\n    <Grid container className={classes.mainBox}>\n      <Grid item xs={12} md={3} className={!showList && classes.hideOnSm}>\n        <div className={classes.input}>\n          <VCERNTextField\n            label=\"Search\"\n            icon={icons.search}\n            value={search}\n            name=\"search\"\n            onChange={handleOnChange}\n          />\n        </div>\n        <div className={classes.chatListBox}>\n          <div className={classes.newChatBox}>\n            <VCERNTypography\n              variant=\"body1\"\n              value=\"Tickets\"\n              className={classes.boldText}\n            />\n            {type === constants.USER_TYPE_ORG && (\n              <Add\n                className={classes.newChatIcon}\n                onClick={() => setShowNewTicketModal(true)}\n              />\n            )}\n          </div>\n          <div className={classes.chatLists}>\n            {filteredChats.map((el) => (\n              <div\n                key={el._id}\n                className={\n                  el._id === currentChatIdx\n                    ? classes.activeChatBox\n                    : classes.chatBox\n                }\n                onClick={() => handleToggleChat(el._id)}\n              >\n                <VCERNAvatar\n                  src={el.image}\n                  className={classes.displayPicture}\n                />\n                <div style={{ flexGrow: 1, flexDirection: \"column\" }}>\n                  <div className={classes.inline}>\n                    <VCERNTypography\n                      variant=\"body1\"\n                      value={el.name}\n                      className={classes.boldText}\n                    />\n                    {!el.seen && <div className={classes.unreadBadge} />}\n                  </div>\n                  <div className={classes.inline}>\n                    <div className={classes.clipedText}>\n                      {el.organization_name || \"Organization Name\"}\n                    </div>\n                    <VCERNTypography\n                      variant=\"body2\"\n                      value={timeDiffFromNow(el.last_message.timestamp)}\n                      customColor=\"#657285\"\n                    />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </Grid>\n      <Grid item xs={12} md={9}>\n        <div\n          className={cx(classes.conversationBox, {\n            [classes.hideOnSm]: showList,\n          })}\n        >\n          <div className={classes.infoBox}>\n            <BackArrow\n              onClick={() => setShowList(true)}\n              className={classes.backIcon}\n            />\n            <VCERNAvatar\n              src={currentChat?.image}\n              className={classes.displayPictureToOpen}\n            />\n            <VCERNTypography\n              variant=\"body1\"\n              value={currentChat?.organization_name}\n              className={classes.boldText}\n            />\n          </div>\n          <div className={classes.ticketInfo}>\n            <VCERNTypography\n              variant=\"h6\"\n              value={currentChat?.subject}\n              className={classes.boldText}\n            />\n            {currentChat && (\n              <>\n                <VCERNTypography\n                  variant=\"body1\"\n                  value={`Ticket Number #${currentChat?.number}`}\n                  className={classes.boldText}\n                />\n                <VCERNTypography variant=\"body1\" className={classes.boldText}>\n                  Status:{\" \"}\n                  <VCERNTypography\n                    variant=\"body1\"\n                    value={currentChat?.open ? \"Open\" : \"Closed\"}\n                    component=\"span\"\n                    className={classes.boldText}\n                    customColor={currentChat?.open ? \"#089156\" : \"#CE2E2E\"}\n                  />\n                </VCERNTypography>\n                {currentChat?.open ? (\n                  <VCERNButton\n                    value=\"Close Ticket\"\n                    background=\"#CE2E2E\"\n                    rounded\n                    onClick={handleCloseTicket}\n                  />\n                ) : (\n                  <VCERNTypography variant=\"body1\" className={classes.boldText}>\n                    Closed By:{\" \"}\n                    <VCERNTypography\n                      variant=\"body1\"\n                      value={currentChat?.closed_by}\n                      component=\"span\"\n                      className={classes.boldText}\n                    />\n                  </VCERNTypography>\n                )}\n              </>\n            )}\n          </div>\n          <div\n            className={classes.messages}\n            id=\"messages\"\n            style={{\n              height: !currentChat?.open\n                ? \"calc(80vh - 250px)\"\n                : \"calc(80vh - 300px)\",\n            }}\n          >\n            {currentChat?.messages?.map((el, idx) => (\n              <div key={idx}>\n                {(\n                  type === constants.USER_TYPE_ORG\n                    ? el.from.message_type === constants.USER_TYPE_ORG\n                    : el.from.message_type === \"vcern_admin\"\n                ) ? (\n                  <div className={classes.myMessageBox}>\n                    <VCERNAvatar\n                      src={el.from.image}\n                      className={classes.displayPicture}\n                    />\n                    {!el.files.length ? (\n                      <div className={classes.myMessageText}>\n                        {el.message}\n                        <br />\n                        <VCERNTypography\n                          variant=\"caption\"\n                          value={getDateTime(el.timestamp)}\n                          customColor=\"#657285\"\n                        />\n                      </div>\n                    ) : (\n                      <FileMessage\n                        className={classes.myMessageText}\n                        message={el}\n                      >\n                        <VCERNTypography\n                          variant=\"caption\"\n                          value={getDateTime(el.timestamp)}\n                          customColor=\"#657285\"\n                        />\n                      </FileMessage>\n                    )}\n                  </div>\n                ) : (\n                  <div className={classes.otherMessageBox}>\n                    <VCERNAvatar\n                      src={el.from.image}\n                      className={classes.otherDisplayPicture}\n                    />\n                    {!el.files.length ? (\n                      <div className={classes.otherMessageText}>\n                        {el.message}\n                        <br />\n                        <VCERNTypography\n                          variant=\"caption\"\n                          value={getDateTime(el.timestamp)}\n                        />\n                      </div>\n                    ) : (\n                      <FileMessage\n                        className={classes.otherMessageText}\n                        message={el}\n                      >\n                        <VCERNTypography\n                          variant=\"caption\"\n                          value={getDateTime(el.timestamp)}\n                        />\n                      </FileMessage>\n                    )}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          {currentChat?.open && (\n            <div className={classes.newMessageBox}>\n              <input\n                className={classes.sendInput}\n                placeholder=\"Type your message here.......\"\n                value={message}\n                name=\"message\"\n                onChange={handleOnChange}\n              />\n              <label htmlFor=\"upload-photo\" className={classes.attachIcon}>\n                <Attach />\n              </label>\n              <input\n                id=\"upload-photo\"\n                type=\"file\"\n                style={{ display: \"none\" }}\n                onChange={handleAttachment}\n                multiple\n              />\n              <div onClick={() => handleSend(message)} className={classes.send}>\n                <Send />\n              </div>\n            </div>\n          )}\n        </div>\n      </Grid>\n\n      <VCERNModal\n        title=\"Submit a New Ticket\"\n        open={showNewTicketModal}\n        onClose={() => setShowNewTicketModal(false)}\n        onConfirm={handleCreateNewTicket}\n        buttonTittle=\"Generate Ticket\"\n      >\n        <VCERNTextField\n          placeholder=\"Subject\"\n          value={subject}\n          name=\"subject\"\n          onChange={handleOnChange}\n          className={classes.newTicketInput}\n        />\n        <VCERNTextField\n          multiline\n          rows={5}\n          placeholder=\"Body\"\n          value={newTicket}\n          name=\"newTicket\"\n          onChange={handleOnChange}\n          className={classes.newTicketInput}\n        />\n      </VCERNModal>\n    </Grid>\n  );\n}\nexport default connect((state) => state, {\n  getPreSignedLink: AC.getPreSignedLink,\n  uploadFile: AC.uploadFile,\n  setCurrentPageTitle: AC.setCurrentPageTitle,\n})(Tickets);\n","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/user/Settings.js",[],["314","315"],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/organization/NewPool.js",[],["316","317"],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/organization/ManageMembers.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/vcern/AddBlog.js",[],["318","319"],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/PaymentAgreements.js",["320","321"],"import { makeStyles } from '@material-ui/core';\nimport React from 'react';\nimport { useHistory } from 'react-router';\nimport logo from '../common/assets/logos/blue.png';\nimport VCERNButton from '../common/elements/VCERNButton';\nimport VCERNTypography from '../common/elements/VCERNTypography';\n\nimport { tosList } from '../common/data';\n\nconst useStyles = makeStyles(theme => ({\n    logoBox: {\n        padding: '40px',\n        [theme.breakpoints.down('sm')]: { padding: '40px 0', display: 'flex', justifyContent: 'center' },\n    },\n\n    root: { margin: '0 auto', width: '60vw', [theme.breakpoints.down('sm')]: { width: '85vw' } },\n    logo: { height: 100, width: 100 },\n\n    listBox: { margin: '30px 0', alignSelf: 'center' },\n    list: { marginBottom: 10 },\n    buttonBox: { width: '100%', display: 'flex', justifyContent: 'space-between', margin: '30px 0' },\n}));\n\nexport default function PaymentAgreements() {\n    const classes = useStyles();\n    const history = useHistory();\n\n    return (\n        <div>\n            <div className={classes.logoBox}>\n                <img src={logo} alt=\"logo\" className={classes.logo} />\n            </div>\n            <div className={classes.root}>\n                <VCERNTypography align=\"center\" variant=\"h3\" className={classes.logoText} value=\"Payment Terms & Agreements\" />\n                <ul className={classes.listBox}>\n                    {tosList.map((el, idx) => (\n                        <VCERNTypography key={idx} variant=\"body1\" component=\"li\" className={classes.list} value={el} />\n                    ))}\n                </ul>\n\n                {/* <div className={classes.buttonBox}>\n                    <VCERNButton fullWidth value=\"Decline\" color=\"secondary\" width=\"46%\" onClick={() => history.push('/login')} />\n                    <VCERNButton fullWidth value=\"Accept\" width=\"46%\" onClick={() => history.push('/login')} />\n                </div> */}\n            </div>\n        </div>\n    );\n}\n","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/PaymentModal.js",["322"],"import { Checkbox, Divider, makeStyles, Radio } from '@material-ui/core';\nimport { CardElement, useElements, useStripe } from '@stripe/react-stripe-js';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport AC from '../redux/actions/actionCreater';\nimport VCERNModal from './elements/VCERNModal';\nimport VCERNTypography from './elements/VCERNTypography';\n\nconst useStyles = makeStyles(theme => ({\n    boldText: { fontWeight: 'bold' },\n\n    divider: { margin: '15px 0' },\n    inline: { display: 'flex', justifyContent: 'space-between', alignItems: 'center' },\n    cardBox: { display: 'flex', alignItems: 'center' },\n\n    membershipText: { padding: 10, fontWeight: 'bold', boxShadow: '0 0 5px #888888', borderRadius: 5 },\n    remberMeContainer: { display: 'flex', alignItems: 'center', width: '100%' },\n    underline: { fontWeight: 'bold', margin: '20px 0', textDecoration: 'underline', cursor: 'pointer' },\n    card: { borderBottom: '2px solid #07A7E3', paddingBottom: 5, margin: '20px 10px' },\n}));\nfunction PaymentModal({ title, open, onClose, onConfirm, setError, userSubscriptionPrice, currentOrganization }) {\n    const classes = useStyles();\n    const history = useHistory();\n    const stripe = useStripe();\n    const elements = useElements();\n\n    const [selectedCard, setSelectedCard] = useState(0);\n    const [agreedTerms, setAgreedTerms] = useState(false);\n\n    const handleSubmit = async evt => {\n        if (!(selectedCard === 999)) return onConfirm();\n        if (!agreedTerms) return setError('Please accept Terms & Conditions to proceed');\n        evt.preventDefault();\n        if (!stripe || !elements) return;\n\n        const cardElement = elements.getElement(CardElement);\n        const { error, paymentMethod } = await stripe.createPaymentMethod({ type: 'card', card: cardElement });\n\n        if (error) {\n            console.log('[error]', error);\n            setError(error.message);\n        } else {\n            // register({ ...data, payment_method: paymentMethod.id }, type, () => history.push('/verify'));\n            onConfirm();\n        }\n    };\n\n    return (\n        <VCERNModal title=\"Payment\" open={open} onClose={onClose} onConfirm={handleSubmit} buttonTittle={title}>\n            <div className={classes.inline}>\n                <VCERNTypography value=\"Yearly Membership\" className={classes.boldText} customColor=\"#657285\" />\n                <VCERNTypography value=\"Yearly Membership\" className={classes.membershipText} />\n            </div>\n            <Divider variant=\"fullWidth\" className={classes.divider} />\n            <VCERNTypography value=\"Summary\" variant=\"h6\" className={classes.boldText} />\n            <VCERNTypography value={`Once a year, you will be charged a $${userSubscriptionPrice}  membership fee by vCERN.`} variant=\"body2\" />\n            <VCERNTypography variant=\"body2\">\n                Additionally,\n                <VCERNTypography variant=\"body2\" color=\"primary\" component=\"span\" value={` ${currentOrganization?.name} `} />\n                will collect a contribution from you every time someone passes away in this pool. This contribution is determined by dividng the payout amount by the number of\n                people in this pool.\n            </VCERNTypography>\n            <VCERNTypography value=\" Your beneficiary will collect $20,000 in the event of your passing.\" variant=\"body1\" className={classes.boldText} />\n            <Divider variant=\"fullWidth\" className={classes.divider} />\n            <VCERNTypography value=\"Select card\" variant=\"h6\" className={classes.boldText} />\n            {[1, 1].map((el, idx) => (\n                <div key={idx} className={classes.cardBox}>\n                    <Radio checked={idx === selectedCard} onChange={() => setSelectedCard(idx)} />\n                    <VCERNTypography variant=\"body2\" value=\"**** **** **** 0000\" className={classes.boldText} customColor=\"#657285\" />\n                </div>\n            ))}\n            <div className={classes.cardBox}>\n                <Radio checked={selectedCard === 999} onChange={() => setSelectedCard(999)} />\n                <VCERNTypography variant=\"body2\" value=\"Add New Card\" className={classes.boldText} />\n            </div>\n            {selectedCard === 999 && (\n                <div>\n                    <CardElement\n                        className={classes.card}\n                        options={{\n                            iconStyle: 'solid',\n                            style: {\n                                base: {\n                                    fontSize: '16px',\n                                    fontSmoothing: 'antialiased',\n                                },\n                                invalid: {\n                                    iconColor: 'red',\n                                    color: 'red',\n                                },\n                            },\n                        }}\n                    />\n                    <div className={classes.remberMeContainer}>\n                        <Checkbox color=\"secondary\" value={agreedTerms} checked={agreedTerms} onChange={evt => setAgreedTerms(evt.target.checked)} />\n                        <VCERNTypography variant=\"body1\" className={classes.boldText}>\n                            By checking this box, you agree to the{' '}\n                            <VCERNTypography\n                                variant=\"body1\"\n                                color=\"secondary\"\n                                component=\"span\"\n                                className={classes.underline}\n                                value=\"Terms & Conditions\"\n                                onClick={() => history.push('/terms-and-conditions')}\n                            />{' '}\n                            and{' '}\n                            <VCERNTypography\n                                variant=\"body1\"\n                                component=\"span\"\n                                color=\"secondary\"\n                                className={classes.underline}\n                                value=\"Privacy Policy\"\n                                onClick={() => history.push('/payment-agreements')}\n                            />\n                        </VCERNTypography>\n                    </div>\n                </div>\n            )}\n        </VCERNModal>\n    );\n}\nexport default connect(state => state, { setError: AC.setError })(PaymentModal);\n","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/BlogCard.js",["323"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nimport VCERNTypography from './elements/VCERNTypography';\nimport { useHistory } from 'react-router-dom';\n\nimport { getFormattedDate } from '../common/helper';\n\nconst useStyles = makeStyles({\n    root: { maxWidth: 340 },\n    boldText: { fontWeight: 'bold' },\n    title: { fontWeight: 'bold', margin: '10px 0' },\n    body: { overflow: 'hidden', textOverflow: 'ellipsis', display: '-webkit-box', '-webkit-line-clamp': 3, '-webkit-box-orient': 'vertical' },\n});\n\nexport default function ImgMediaCard({ blog }) {\n    const { image, title, description } = blog;\n    const classes = useStyles();\n    const history = useHistory();\n\n    return (\n        <Card className={classes.root} onClick={() => history.push('/blog', { ...blog })}>\n            <CardActionArea>\n                <CardMedia component=\"img\" alt=\"Blog Image\" height=\"250\" image={image} title={title} />\n                <CardContent>\n                    <VCERNTypography variant=\"h6\" className={classes.title} value={title} />\n                    <VCERNTypography variant=\"body2\" className={classes.body} value={description} />\n                </CardContent>\n            </CardActionArea>\n        </Card>\n    );\n}\n","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNDropdown.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/MonthsSlider.js",["324","325","326"],"import React, { useEffect } from 'react';\nimport Slider from 'react-slick';\n\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport { useState } from 'react';\nimport VCERNTypography from './elements/VCERNTypography';\nimport { months } from './data';\n\nimport moment from 'moment';\nimport { makeStyles } from '@material-ui/core';\nimport { getCurrentMonth } from './helper';\n\nconst useStyles = makeStyles(theme => ({\n    activeMonth: { color: '#07A7E3', transform: 'scale(1.5)', fontWeight: 'bold' },\n    month: { color: '#657285' },\n}));\n\nexport default function MonthsSlider({ currentMonth, setCurrentMonth }) {\n    const classes = useStyles();\n\n    useEffect(() => {\n        setCurrentMonth(getCurrentMonth());\n    }, []);\n\n    const settings = {\n        className: 'center',\n        centerMode: true,\n        infinite: true,\n        centerPadding: '60px',\n        nextArrow: <Arrow position={'right'} />,\n        prevArrow: <Arrow position={'left'} />,\n        speed: 500,\n        slidesToShow: 5,\n        slidesToScroll: 1,\n        initialSlide: getCurrentMonth(),\n        responsive: [\n            { breakpoint: 1024, settings: { slidesToShow: 3, slidesToScroll: 3 } },\n            { breakpoint: 600, settings: { slidesToShow: 3, slidesToScroll: 3 } },\n            { breakpoint: 480, settings: { slidesToShow: 1, slidesToScroll: 1 } },\n        ],\n        afterChange: next => setCurrentMonth(next),\n    };\n\n    return (\n        <div>\n            <Slider {...settings}>\n                {months.map((el, idx) => (\n                    <VCERNTypography align=\"center\" variant=\"body1\" key={idx} value={el} className={idx === currentMonth ? classes.activeMonth : classes.month} />\n                ))}\n            </Slider>\n        </div>\n    );\n}\n\nfunction Arrow(props) {\n    const { className, style, onClick, position } = props;\n    const iconStyle = { color: '#07a7e3' };\n\n    return (\n        <div className={`${className} ${position === 'left' ? 'slider-left' : 'slider-right'}`} style={{ ...style, display: 'block' }} onClick={onClick}>\n            {position === 'left' ? <ChevronLeftIcon fontSize=\"large\" style={iconStyle} /> : <ChevronRightIcon fontSize=\"large\" style={iconStyle} />}\n        </div>\n    );\n}\n",["327","328"],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/api.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/Header.js",["329"],"import React, { useEffect, useState } from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Badge from \"@material-ui/core/Badge\";\nimport Container from \"@material-ui/core/Container\";\n\nimport VCERNTypography from \"./elements/VCERNTypography\";\nimport VCERNAvatar from \"./elements/VCERNAvatar\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport { connect } from \"react-redux\";\n\nimport icons from \"./icons\";\n\nimport AC from \"../redux/actions/actionCreater\";\nimport { useHistory, useLocation } from \"react-router\";\nimport { Button, Menu, MenuItem } from \"@material-ui/core\";\n\nimport {\n  handleNotification,\n  join,\n  onJoin,\n  onUpdate,\n  onNewNotification,\n  disconnectSocket,\n} from \"../common/socketNotifications\";\nimport constants from \"./constants\";\nimport { timeDiffFromNow } from \"./helper\";\n\nimport { MembersMenu, vcernMenu, organizationsMenu } from \"./data\";\nimport PaymentModal from \"./PaymentModal\";\nimport VCERNAlert from \"./elements/VCERNAlert\";\n\nimport logoPic from \"./assets/logos/blue.png\";\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme) => ({\n  root: { display: \"flex\" },\n  toolbar: { paddingRight: 24 },\n  toolbarIcon: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    background: \"white\",\n    boxShadow: \"none\",\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: { marginRight: 36 },\n  menuButtonHidden: { display: \"none\" },\n  title: { flexGrow: 1 },\n  drawerPaper: {\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: \"hidden\",\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up(\"sm\")]: { width: theme.spacing(9) },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: { flexGrow: 1, height: \"100vh\", overflow: \"auto\" },\n  container: {\n    padding: theme.spacing(4),\n    [theme.breakpoints.down(\"sm\")]: { padding: theme.spacing(1) },\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n\n  boldText: { fontWeight: \"bold\" },\n  displayPicture: {\n    height: 100,\n    width: 100,\n    marginBottom: 20,\n    borderRadius: 50,\n  },\n  infoBox: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    padding: 20,\n  },\n\n  divider: { margin: \"15px 0\" },\n  notificationsTitle: { fontWeight: \"bold\", margin: \"10px 15px\" },\n  notificationsPicture: {\n    height: 50,\n    width: 50,\n    marginRight: 10,\n    borderRadius: 50,\n  },\n  clipedText: { whiteSpace: \"initial\", width: 250, fontWeight: \"bold\" },\n  notificationTextBox: { display: \"flex\", flexDirection: \"column\" },\n}));\n\nfunction Header({\n  children,\n  logout,\n  currentUser,\n  type,\n  joinPool,\n  token,\n  payEvent,\n  currentPageTitle,\n  currentOrganization,\n}) {\n  const classes = useStyles();\n  const history = useHistory();\n  const location = useLocation();\n\n  const [open, setOpen] = useState(true);\n  const [hideHeader, setHideHeader] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  const [notification, setNotification] = useState();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [showPaymentModal, setShowPaymentModal] = useState(false);\n\n  const [successMessage, setSuccessMessage] = useState(false);\n\n  const { _id, organization } = currentUser;\n\n  useEffect(() => {\n    join(\n      type === constants.USER_TYPE_VCERN ? \"vcern_admin\" : type,\n      _id,\n      organization\n    );\n    onJoin(setNotifications);\n    onUpdate();\n    onNewNotification(setNotifications);\n\n    return () => disconnectSocket();\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    setHideHeader(location.pathname === \"/select-pool\");\n  }, [location.pathname]);\n\n  const handleLogout = () => {\n    logout();\n    history.push(\"/\");\n  };\n\n  const handleNotifiactionsClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleConfirmPayment = () => {\n    notification?.type === \"pool_invitation\"\n      ? joinPool(notification?.pool_invitation, token, () => {\n          setSuccessMessage(`Joined New Pool Successfully.`);\n          setShowPaymentModal(false);\n        })\n      : payEvent(notification?.event, token, () => {\n          setSuccessMessage(`Successfully Paid for the event.`);\n          setShowPaymentModal(false);\n        });\n  };\n\n  const handleMenuOption = (currentNotification) => {\n    setNotification(currentNotification);\n    const { type } = currentNotification;\n    setAnchorEl(null);\n    (type === \"pool_invitation\" || type === \"event\") &&\n      setShowPaymentModal(true);\n\n    // handle announcment type\n    // handleNotification();\n  };\n  useEffect(() => {\n    window.scrollY = 0;\n  }, [location.pathname]);\n  const renderMenu =\n    type === constants.USER_TYPE_MEMBER\n      ? MembersMenu\n      : type === constants.USER_TYPE_ORG\n      ? organizationsMenu\n      : vcernMenu;\n  console.log({ location });\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <div style={{ display: hideHeader ? \"none\" : \"flex\" }}>\n        <AppBar\n          position=\"absolute\"\n          className={clsx(classes.appBar, open && classes.appBarShift)}\n        >\n          <Toolbar className={classes.toolbar}>\n            <IconButton\n              edge=\"start\"\n              aria-label=\"open drawer\"\n              onClick={() => setOpen(true)}\n              className={clsx(\n                classes.menuButton,\n                open && classes.menuButtonHidden\n              )}\n            >\n              {icons.menu}\n            </IconButton>\n            <VCERNTypography\n              variant=\"h6\"\n              noWrap\n              value={currentPageTitle}\n              className={classes.title}\n            />\n            {!(type === constants.USER_TYPE_VCERN) && (\n              <Button\n                color=\"primary\"\n                variant=\"outlined\"\n                onClick={() => history.push(\"/select-pool\")}\n              >\n                Change Pool\n              </Button>\n            )}\n            <IconButton color=\"inherit\" onClick={handleNotifiactionsClick}>\n              <Badge badgeContent={\" \"} color=\"secondary\">\n                {icons.notification}\n              </Badge>\n            </IconButton>\n            <Menu\n              anchorEl={anchorEl}\n              keepMounted\n              open={!!anchorEl}\n              onClose={() => setAnchorEl(null)}\n            >\n              {!!notifications.length ? (\n                <>\n                  <VCERNTypography\n                    variant=\"body1\"\n                    noWrap\n                    value=\"New\"\n                    className={classes.notificationsTitle}\n                  />\n                  {notifications.map((el, idx) => (\n                    <MenuItem onClick={() => handleMenuOption(el)} key={idx}>\n                      <VCERNAvatar\n                        src={el?.image}\n                        className={classes.notificationsPicture}\n                      >\n                        ?\n                      </VCERNAvatar>\n                      <div className={classes.notificationTextBox}>\n                        <VCERNTypography\n                          className={classes.clipedText}\n                          variant=\"body2\"\n                          value={`${el?.title}! ${el?.description}`}\n                        />\n                        <VCERNTypography\n                          variant=\"caption\"\n                          noWrap\n                          value={timeDiffFromNow(el.date)}\n                          customColor=\"#6F7F9F\"\n                        />\n                      </div>\n                    </MenuItem>\n                  ))}\n                  {/* <Divider variant=\"middle\" className={classes.divider} /> */}\n                </>\n              ) : (\n                <VCERNTypography\n                  variant=\"body1\"\n                  noWrap\n                  value=\"Nothing To Show\"\n                  className={classes.notificationsTitle}\n                />\n              )}\n            </Menu>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          variant=\"permanent\"\n          classes={{\n            paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n          }}\n          open={open}\n        >\n          <div className={classes.toolbarIcon}>\n            <IconButton onClick={() => setOpen(false)}>\n              {icons.right}\n            </IconButton>\n          </div>\n          {open && (\n            <>\n              {type === constants.USER_TYPE_VCERN ? (\n                <div className={classes.infoBox}>\n                  <VCERNAvatar\n                    src={logoPic}\n                    className={classes.displayPicture}\n                    alt={`VCERN Logo`}\n                  />\n                  <VCERNTypography\n                    variant=\"h5\"\n                    className={classes.boldText}\n                    value=\"vCERN\"\n                  />\n                  <VCERNTypography\n                    variant=\"caption\"\n                    customColor=\"#FE9900\"\n                    value=\"The Best Alternative to Life Insurance\"\n                  />\n                </div>\n              ) : (\n                <div className={classes.infoBox}>\n                  <VCERNAvatar\n                    src={currentOrganization?.image}\n                    className={classes.displayPicture}\n                    alt={`Organizations Name`}\n                  />\n                  <VCERNTypography\n                    variant=\"body2\"\n                    className={classes.boldText}\n                    value={currentOrganization?.name}\n                  />\n                </div>\n              )}\n            </>\n          )}\n          <Divider variant=\"middle\" />\n          <List>\n            {renderMenu.map((el, idx) => (\n              <ListItem key={idx} component=\"a\" href={el.href} button>\n                <ListItemIcon>{el.icon}</ListItemIcon>\n                <ListItemText primary={el.title} />\n              </ListItem>\n            ))}\n            <ListItem button onClick={handleLogout}>\n              <ListItemIcon>{icons.logout}</ListItemIcon>\n              <ListItemText primary=\"Logout\" />\n            </ListItem>\n          </List>\n        </Drawer>\n      </div>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          {children}\n        </Container>\n      </main>\n      <PaymentModal\n        onClose={() => setShowPaymentModal(false)}\n        open={showPaymentModal}\n        onConfirm={handleConfirmPayment}\n        title={notification?.type === \"pool_invitation\" ? \"Join\" : \"Pay\"}\n      />\n      <VCERNAlert\n        message={successMessage}\n        onClose={() => setSuccessMessage(false)}\n        success={true}\n      />\n    </div>\n  );\n}\n\nexport default connect((state) => state, {\n  logout: AC.logout,\n  joinPool: AC.joinPool,\n  payEvent: AC.payEvent,\n})(Header);\n","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/organization/ManageGroups.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/user/Register.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNTextField.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/index.js",[],["330","331"],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/redux/actions/actionCreater.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/ForgotPassword.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/ResetPassword.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/Blogs.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/Events.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/user/EditProfile.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/organization/Dashboard.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/vcern/ManageOrganizations.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNTypography.js",[],["332","333"],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/socketNotifications.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/DashboardHeader.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNConfirmationModal.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/constants.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/socketChat.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/Login.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/Messages.js",["334"],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/Profile.js",["335","336","337"],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/user/Dashboard.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/user/Documents.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/organization/Register.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/vcern/Dashboard.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/helper.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNLineChart.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNModal.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNAutocomplete.js",[],["338","339"],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNAlert.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/Terms.js",["340","341"],"import { makeStyles } from '@material-ui/core';\nimport React from 'react';\nimport { useHistory } from 'react-router';\nimport logo from '../common/assets/logos/blue.png';\nimport VCERNButton from '../common/elements/VCERNButton';\nimport VCERNTypography from '../common/elements/VCERNTypography';\n\nimport { tosList } from '../common/data';\n\nconst useStyles = makeStyles(theme => ({\n    logoBox: {\n        padding: '40px',\n        [theme.breakpoints.down('sm')]: { padding: '40px 0', display: 'flex', justifyContent: 'center' },\n    },\n\n    root: { margin: '0 auto', width: '60vw', [theme.breakpoints.down('sm')]: { width: '85vw' } },\n    logo: { height: 100, width: 100 },\n\n    listBox: { margin: '30px 0', alignSelf: 'center' },\n    list: { marginBottom: 10 },\n    buttonBox: { width: '100%', display: 'flex', justifyContent: 'space-between', margin: '30px 0' },\n}));\n\nexport default function Terms() {\n    const classes = useStyles();\n    const history = useHistory();\n\n    return (\n        <div>\n            <div className={classes.logoBox}>\n                <img src={logo} alt=\"logo\" className={classes.logo} />\n            </div>\n            <div className={classes.root}>\n                <VCERNTypography align=\"center\" variant=\"h3\" className={classes.logoText} value=\"Terms of Services\" />\n                <ul className={classes.listBox}>\n                    {tosList.map((el, idx) => (\n                        <VCERNTypography key={idx} variant=\"body1\" component=\"li\" className={classes.list} value={el} />\n                    ))}\n                </ul>\n\n                {/* <div className={classes.buttonBox}>\n                    <VCERNButton fullWidth value=\"Decline\" color=\"secondary\" width=\"46%\" onClick={() => history.push('/login')} />\n                    <VCERNButton fullWidth value=\"Accept\" width=\"46%\" onClick={() => history.push('/login')} />\n                </div> */}\n            </div>\n        </div>\n    );\n}\n","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/Verify.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/SingleBlog.js",["342","343"],"import { Divider, makeStyles } from '@material-ui/core';\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nimport VCERNAvatar from '../common/elements/VCERNAvatar';\nimport VCERNTypography from '../common/elements/VCERNTypography';\nimport { getFormattedDate } from '../common/helper';\nimport AC from '../redux/actions/actionCreater';\n\nconst useStyles = makeStyles(theme => ({\n    image: { width: '100%', height: 400, objectFit: 'contain' },\n    title: { fontWeight: 'bold', margin: '20px 0' },\n    boldText: { fontWeight: 'bold' },\n    inline: { display: 'flex', justifyContent: 'space-between' },\n    divider: { margin: '15px 0' },\n    body: { padding: '20px 0' },\n    underline: { fontWeight: 'bold', textDecoration: 'underline', color: '#FE9900' },\n}));\n\nfunction SingleBlog({ setCurrentPageTitle }) {\n    const classes = useStyles();\n    const location = useLocation();\n    const history = useHistory();\n\n    const [blog, setBlog] = useState({ author: '', date: '', description: '', image: '', link: '', title: '' });\n\n    const { author, date, description, image, link, title } = blog;\n\n    useEffect(() => {\n        setCurrentPageTitle(`${location?.state?.title}`);\n        location?.state?.title ? setBlog(location?.state) : history.push('/blogs');\n\n        // eslint-disable-next-line\n    }, []);\n\n    return (\n        <div>\n            <img src={image} className={classes.image} />\n            <VCERNTypography variant=\"h3\" value={title} className={classes.title} />\n            <div className={classes.inline}>\n                <VCERNTypography variant=\"body1\" value={author} className={classes.boldText} customColor=\"#657285\" />\n                <VCERNTypography variant=\"body1\" value={getFormattedDate(date)} className={classes.boldText} customColor=\"#657285\" />\n            </div>\n            <Divider className={classes.divider} />\n            <VCERNTypography variant=\"body1\" value={description} className={classes.body} customColor=\"#657285\" />\n            <a className={classes.underline} href={link} target=\"_blank\" rel=\"noreferrer\">\n                Read More\n            </a>\n        </div>\n    );\n}\nexport default connect(state => state, { setCurrentPageTitle: AC.setCurrentPageTitle })(SingleBlog);\n","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/AllPools.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/organization/Payments.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/vcern/ManageAdmins.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/vcern/Payments.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNButton.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/InfoCard.js",["344"],"import { Grid, Paper, makeStyles } from '@material-ui/core';\nimport React from 'react';\nimport VCERNTypography from './elements/VCERNTypography';\nimport { getFormattedDate, getYearsfromNow } from './helper';\n\nconst useStyles = makeStyles(theme => ({\n    root: { padding: theme.spacing(2), display: 'flex', alignItems: 'center' },\n\n    imgBox: { position: 'relative' },\n    diedPersonPic: { height: 150, width: 150, marginRight: 15 },\n    diedPersonNameBox: {\n        position: 'absolute',\n        bottom: 5,\n        width: 150,\n        height: 60,\n        paddingTop: 10,\n        backgroundImage: `linear-gradient(rgba(0,0,0,0), rgba(18,41,77,0.8))`,\n    },\n    detailsBox: { width: '100%' },\n\n    boldText: { fontWeight: 'bold' },\n    divider: { height: 1, width: '100%', background: '#EBEEFA', margin: '5px 0' },\n}));\n\nexport default function InfoCard({ event }) {\n    const classes = useStyles();\n    const { complete, date, description, title, member_id } = event;\n    const { first_name, last_name, dob, image } = member_id;\n\n    return (\n        <Grid item xs={12} md={6} lg={4}>\n            <Paper className={classes.root}>\n                <div className={classes.imgBox}>\n                    <img src={image} alt=\"Died Person\" className={classes.diedPersonPic} />\n                    <div className={classes.diedPersonNameBox}>\n                        <VCERNTypography variant=\"body1\" align=\"center\" value={`${first_name} ${last_name}`} customColor=\"#fff\" className={classes.boldText} />\n                        <VCERNTypography variant=\"body2\" align=\"center\" value={`Was ${getYearsfromNow(dob)} Y. old`} customColor=\"#fff\" />\n                    </div>\n                </div>\n                <div className={classes.detailsBox}>\n                    <VCERNTypography variant=\"body2\" value=\"Date of Death:\" className={classes.boldText} />\n                    <VCERNTypography variant=\"body2\" value={getFormattedDate(date)} customColor=\"#6F7F9F\" />\n                    <div className={classes.divider} />\n                    <VCERNTypography variant=\"body2\" value=\"Place of Death:\" className={classes.boldText} />\n                    <VCERNTypography variant=\"body2\" value={description} customColor=\"#6F7F9F\" />\n                    <div className={classes.divider} />\n                    <VCERNTypography variant=\"body2\" value=\"Cause of Death:\" className={classes.boldText} />\n                    <VCERNTypography variant=\"body2\" value={title} customColor=\"#6F7F9F\" />\n                </div>\n            </Paper>\n        </Grid>\n    );\n}\n","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/data/index.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNGroupAvatar.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/FileMessage.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNPieChart.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/user/Payments.js",["345","346"],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/icons.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/utils/useWindowDims.js",["347","348"],"import React, { useEffect, useState } from \"react\";\n\nexport function useWindowDims() {\n  // Initialize state with undefined width/height so server and client renders match\n\n  const [windowDims, setWindowDims] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  const handleResize = () => {\n    setWindowDims((prev) => ({\n      ...prev,\n      width: window.innerWidth,\n      height: window.innerHeight,\n    }));\n  };\n\n  const handleChanges = () => {\n    handleResize();\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleChanges);\n\n    handleChanges();\n\n    return () => {\n      window.removeEventListener(\"resize\", handleChanges);\n    };\n  }, []);\n\n  return windowDims;\n}\n","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/loader.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/DocumentsList.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/SelectPool.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/OrganizationsList.js",["349","350","351","352"],"import { Divider, Grid, makeStyles, Paper, Table, TableCell, TableHead, TableRow } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\n\nimport VCERNTypography from './elements/VCERNTypography';\nimport VCERNAvatar from './elements/VCERNAvatar';\n\nimport { connect } from 'react-redux';\nimport AC from '../redux/actions/actionCreater';\nimport { TableBody } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles(theme => ({\n    paper: { padding: theme.spacing(2), display: 'flex', flexDirection: 'column' },\n    title: { fontWeight: 'bold', marginBottom: 10 },\n    divider: { marginTop: 10 },\n    pic: { height: 40, width: 40, cursor: 'pointer' },\n}));\n\nfunction Dashboard({ fetchOrganizations, organizations, setCurrentOrganization, goToOrg }) {\n    const classes = useStyles();\n    const history = useHistory();\n\n    useEffect(() => {\n        fetchOrganizations();\n    }, []);\n\n    useEffect(() => {\n        setCurrentOrganization(organizations[0]);\n    }, [organizations]);\n\n    const handleOrgClicked = org => {\n        setCurrentOrganization(org);\n        history.push(goToOrg ? '/organizations-history' : '/organization');\n    };\n    return (\n        <Grid item xs={12}>\n            <Paper className={classes.paper}>\n                <VCERNTypography variant=\"h6\" className={classes.title} value=\"Organizations\" />\n\n                <Table stickyHeader>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Image</TableCell>\n                            <TableCell>Name</TableCell>\n                            <TableCell>Members</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {organizations.map((el, idx) => (\n                            <TableRow key={idx}>\n                                <TableCell>\n                                    <VCERNAvatar className={classes.pic} src={el?.image} onClick={() => handleOrgClicked(el)} />\n                                </TableCell>\n                                <TableCell>{el?.name}</TableCell>\n                                <TableCell>{el?.number_of_members}</TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </Paper>\n        </Grid>\n    );\n}\nexport default connect(state => state, { fetchOrganizations: AC.fetchOrganizations, setCurrentOrganization: AC.setCurrentOrganization })(Dashboard);\n","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/vcern/SingleOrganization.js",["353"],"import { Grid, makeStyles, Paper } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router';\n\nimport VCERNButton from '../../common/elements/VCERNButton';\n\nimport VCERNLineChart from '../../common/elements/VCERNLineChart';\nimport VCERNPieChart from '../../common/elements/VCERNPieChart';\nimport VCERNTypography from '../../common/elements/VCERNTypography';\n\nimport { connect } from 'react-redux';\nimport icons from '../../common/icons';\nimport DashboardHeader from '../../common/DashboardHeader';\nimport InfoCard from '../../common/InfoCard';\nimport AC from '../../redux/actions/actionCreater';\n\nconst minHeight = 300;\nconst useStyles = makeStyles(theme => ({\n    paper: { padding: theme.spacing(2), display: 'flex', flexDirection: 'column', minHeight: minHeight, maxHeight: '100%' },\n    title: { fontWeight: 'bold', marginTop: 10 },\n\n    continueButton: { margin: '10px 0' },\n    graphText: { fontWeight: 'bold', marginBottom: 10, textAlign: 'center' },\n\n    buttonBox: { width: '100%', textAlign: 'center' },\n    inviteText: { fontWeight: 'bold', marginTop: 10 },\n}));\n\nfunction Dashboard({ selectedPool, token, fetchStats, fetchPoolEvents, fetchPendingMembers, currentOrganization, setCurrentPageTitle }) {\n    const classes = useStyles();\n    const history = useHistory();\n\n    const [stats, setStats] = useState(null);\n    const [events, setEvents] = useState([]);\n    const [pendingMembers, setPendingMembers] = useState([]);\n\n    useEffect(() => {\n        setCurrentPageTitle(`${currentOrganization?.name}`);\n        fetchPendingMembers(currentOrganization?._id, token, setPendingMembers);\n\n        // eslint-disable-next-line\n    }, []);\n\n    useEffect(() => {\n        fetchStats(selectedPool?._id, 'organization', token, setStats);\n        fetchPoolEvents(selectedPool?._id, token, setEvents);\n    }, [selectedPool]);\n\n    return (\n        <Grid container spacing={3}>\n            <DashboardHeader />\n            <Grid item xs={12} md={6}>\n                <Paper className={classes.paper}>\n                    <VCERNTypography variant=\"body1\" className={classes.graphText} value={`Total Members: ${stats?.number_of_members}`} />\n                    <VCERNPieChart\n                        data={[\n                            { name: 'Pending', value: stats?.number_of_pending, color: '#FE9900' },\n                            { name: 'Deceased', value: stats?.number_of_deceased, color: '#C90000' },\n                            { name: 'Active', value: stats?.number_of_active, color: '#1DD1A1' },\n                        ]}\n                    />\n                </Paper>\n            </Grid>\n            <Grid item xs={12} md={6}>\n                <Paper className={classes.paper}>\n                    <VCERNTypography variant=\"body1\" className={classes.graphText} value=\"Financial Reports\" />\n                    <VCERNPieChart\n                        data={[\n                            { name: 'Raised', value: stats?.total_money, color: '#07A7E3' },\n                            { name: 'Delinquent', value: stats?.delinquent, color: '#035ED9' },\n                            { name: 'Balance', value: stats?.current_event_money, color: '#FE9900' },\n                        ]}\n                    />\n                </Paper>\n            </Grid>\n            <Grid item xs={12}>\n                <Paper className={classes.paper}>\n                    <VCERNTypography variant=\"body1\" className={classes.graphText} value=\"Waiting Pool status\" />\n                    <VCERNLineChart data={pendingMembers} />\n                </Paper>\n            </Grid>\n\n            {!!events.length && (\n                <>\n                    <VCERNTypography variant=\"h5\" className={classes.inviteText} value=\"Events Info\" />\n                    <Grid container spacing={3} style={{ margin: '20px 0' }}>\n                        {events.map((el, idx) => (\n                            <>{idx < 3 && <InfoCard key={idx} event={el} />}</>\n                        ))}\n                    </Grid>\n                    <Grid container spacing={3} style={{ margin: '0 0 20px 0', justifyContent: 'center' }}>\n                        <VCERNButton fullWidth startIcon={icons.eye} value=\"View All Events\" onClick={() => history.push('/events', events)} />\n                    </Grid>\n                </>\n            )}\n        </Grid>\n    );\n}\nexport default connect(state => state, {\n    fetchPoolEvents: AC.fetchPoolEvents,\n    fetchStats: AC.fetchStats,\n    fetchPendingMembers: AC.fetchPendingMembers,\n    setCurrentPageTitle: AC.setCurrentPageTitle,\n})(Dashboard);\n","/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/elements/VCERNImageUpload.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/pages/organization/Settings.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/common/theme.js",[],"/Users/techtiesibrahim/Desktop/Code/vcern/VCERN-webapp/src/utils/copyToClipboard.js",[],{"ruleId":"354","replacedBy":"355"},{"ruleId":"356","replacedBy":"357"},{"ruleId":"358","severity":1,"message":"359","line":7,"column":3,"nodeType":"360","messageId":"361","endLine":7,"endColumn":14},{"ruleId":"362","severity":1,"message":"363","line":135,"column":6,"nodeType":"364","endLine":135,"endColumn":8,"suggestions":"365"},{"ruleId":"354","replacedBy":"366"},{"ruleId":"356","replacedBy":"367"},{"ruleId":"368","severity":1,"message":"369","line":75,"column":5,"nodeType":"370","messageId":"371","endLine":75,"endColumn":15},{"ruleId":"354","replacedBy":"372"},{"ruleId":"356","replacedBy":"373"},{"ruleId":"354","replacedBy":"374"},{"ruleId":"356","replacedBy":"375"},{"ruleId":"354","replacedBy":"376"},{"ruleId":"356","replacedBy":"377"},{"ruleId":"358","severity":1,"message":"378","line":5,"column":8,"nodeType":"360","messageId":"361","endLine":5,"endColumn":19},{"ruleId":"358","severity":1,"message":"379","line":26,"column":11,"nodeType":"360","messageId":"361","endLine":26,"endColumn":18},{"ruleId":"358","severity":1,"message":"380","line":38,"column":24,"nodeType":"360","messageId":"361","endLine":38,"endColumn":37},{"ruleId":"358","severity":1,"message":"381","line":11,"column":10,"nodeType":"360","messageId":"361","endLine":11,"endColumn":26},{"ruleId":"358","severity":1,"message":"382","line":6,"column":10,"nodeType":"360","messageId":"361","endLine":6,"endColumn":18},{"ruleId":"358","severity":1,"message":"383","line":10,"column":8,"nodeType":"360","messageId":"361","endLine":10,"endColumn":14},{"ruleId":"362","severity":1,"message":"384","line":24,"column":8,"nodeType":"364","endLine":24,"endColumn":10,"suggestions":"385"},{"ruleId":"354","replacedBy":"386"},{"ruleId":"356","replacedBy":"387"},{"ruleId":"358","severity":1,"message":"388","line":29,"column":3,"nodeType":"360","messageId":"361","endLine":29,"endColumn":21},{"ruleId":"354","replacedBy":"389"},{"ruleId":"356","replacedBy":"390"},{"ruleId":"354","replacedBy":"391"},{"ruleId":"356","replacedBy":"392"},{"ruleId":"368","severity":1,"message":"369","line":67,"column":5,"nodeType":"370","messageId":"371","endLine":67,"endColumn":15},{"ruleId":"358","severity":1,"message":"393","line":16,"column":8,"nodeType":"360","messageId":"361","endLine":16,"endColumn":11},{"ruleId":"358","severity":1,"message":"394","line":56,"column":10,"nodeType":"360","messageId":"361","endLine":56,"endColumn":22},{"ruleId":"358","severity":1,"message":"395","line":56,"column":24,"nodeType":"360","messageId":"361","endLine":56,"endColumn":39},{"ruleId":"354","replacedBy":"396"},{"ruleId":"356","replacedBy":"397"},{"ruleId":"358","severity":1,"message":"378","line":5,"column":8,"nodeType":"360","messageId":"361","endLine":5,"endColumn":19},{"ruleId":"358","severity":1,"message":"379","line":26,"column":11,"nodeType":"360","messageId":"361","endLine":26,"endColumn":18},{"ruleId":"358","severity":1,"message":"398","line":6,"column":8,"nodeType":"360","messageId":"361","endLine":6,"endColumn":19},{"ruleId":"399","severity":1,"message":"400","line":39,"column":13,"nodeType":"401","endLine":39,"endColumn":58},{"ruleId":"358","severity":1,"message":"402","line":27,"column":13,"nodeType":"360","messageId":"361","endLine":27,"endColumn":21},{"ruleId":"403","severity":1,"message":"404","line":139,"column":24,"nodeType":"405","messageId":"371","endLine":139,"endColumn":26},{"ruleId":"403","severity":1,"message":"404","line":141,"column":17,"nodeType":"405","messageId":"371","endLine":141,"endColumn":19},{"ruleId":"358","severity":1,"message":"406","line":1,"column":8,"nodeType":"360","messageId":"361","endLine":1,"endColumn":13},{"ruleId":"362","severity":1,"message":"407","line":31,"column":6,"nodeType":"364","endLine":31,"endColumn":8,"suggestions":"408"},{"ruleId":"358","severity":1,"message":"409","line":1,"column":10,"nodeType":"360","messageId":"361","endLine":1,"endColumn":17},{"ruleId":"358","severity":1,"message":"382","line":2,"column":28,"nodeType":"360","messageId":"361","endLine":2,"endColumn":36},{"ruleId":"362","severity":1,"message":"410","line":25,"column":8,"nodeType":"364","endLine":25,"endColumn":10,"suggestions":"411"},{"ruleId":"362","severity":1,"message":"412","line":29,"column":8,"nodeType":"364","endLine":29,"endColumn":23,"suggestions":"413"},{"ruleId":"362","severity":1,"message":"414","line":47,"column":8,"nodeType":"364","endLine":47,"endColumn":22,"suggestions":"415"},"no-native-reassign",["416"],"no-negated-in-lhs",["417"],"no-unused-vars","'useLocation' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setLoading'. Either include it or remove the dependency array. If 'setLoading' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["418"],["416"],["417"],"no-dupe-keys","Duplicate key 'alignItems'.","ObjectExpression","unexpected",["416"],["417"],["416"],["417"],["416"],["417"],"'VCERNButton' is defined but never used.","'history' is assigned a value but never used.","'paymentMethod' is assigned a value but never used.","'getFormattedDate' is defined but never used.","'useState' is defined but never used.","'moment' is defined but never used.","React Hook useEffect has a missing dependency: 'setCurrentMonth'. Either include it or remove the dependency array. If 'setCurrentMonth' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["419"],["416"],["417"],"'handleNotification' is defined but never used.",["416"],["417"],["416"],["417"],"'API' is defined but never used.","'messageModal' is assigned a value but never used.","'setMessageModal' is assigned a value but never used.",["416"],["417"],"'VCERNAvatar' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'complete' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'React' is defined but never used.","React Hook useEffect has a missing dependency: 'handleChanges'. Either include it or remove the dependency array.",["420"],"'Divider' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchOrganizations'. Either include it or remove the dependency array. If 'fetchOrganizations' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["421"],"React Hook useEffect has a missing dependency: 'setCurrentOrganization'. Either include it or remove the dependency array. If 'setCurrentOrganization' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["422"],"React Hook useEffect has missing dependencies: 'fetchPoolEvents', 'fetchStats', and 'token'. Either include them or remove the dependency array. If 'fetchStats' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["423"],"no-global-assign","no-unsafe-negation",{"desc":"424","fix":"425"},{"desc":"426","fix":"427"},{"desc":"428","fix":"429"},{"desc":"430","fix":"431"},{"desc":"432","fix":"433"},{"desc":"434","fix":"435"},"Update the dependencies array to be: [setLoading]",{"range":"436","text":"437"},"Update the dependencies array to be: [setCurrentMonth]",{"range":"438","text":"439"},"Update the dependencies array to be: [handleChanges]",{"range":"440","text":"441"},"Update the dependencies array to be: [fetchOrganizations]",{"range":"442","text":"443"},"Update the dependencies array to be: [organizations, setCurrentOrganization]",{"range":"444","text":"445"},"Update the dependencies array to be: [fetchPoolEvents, fetchStats, selectedPool, token]",{"range":"446","text":"447"},[5010,5012],"[setLoading]",[796,798],"[setCurrentMonth]",[677,679],"[handleChanges]",[945,947],"[fetchOrganizations]",[1030,1045],"[organizations, setCurrentOrganization]",[1874,1888],"[fetchPoolEvents, fetchStats, selectedPool, token]"]